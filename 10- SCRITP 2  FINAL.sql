-- INSTITUTO NACIONAL DE APRENDIZAJE
-- MODULO BASES DE DATOS
-- JAFET DANIEL ULATE ALVAREZ
-- TERCERA PARTE DEL PROYECTO
-- EN ESTE SCRIPT SE ENCUENTRA
-- 1- CONSULTAS
-- 2- PROCEDIMIENTOS ALMACENADOS (CRUD) POR CADA TABLA
-- 3- FUNCIONES
-- 4- TRIGGERS
-- 5- PS_ MATRICULA DE ESTUDIANTES
-- 6- PS_ CREACION DE MATRICULA
USE BASE_DATOS_PROYECTO
GO
											---------
											---------
											---------
							  			 -- CONSULTAS --
--CONSULTAS INNER JOIN
	--A-1 NOMBRE DEL ESTUDIANTE Y EL CODIGO  EL QUE ESTA MATRICULADO
SELECT NOMBRE_EST,PMA.COD_PROGRAMAS_MODULOS_ABIERTOS
FROM ESTUDIANTES E INNER JOIN MATRICULAS M
ON E.CARNET_EST=M.CARNET_EST
INNER JOIN DETALLE_MATRICULAS DM
ON DM.NUM_RECIBO=M.NUM_RECIBO
INNER JOIN PROGRAMAS_MODULOS_ABIERTOS PMA
ON DM.COD_PROGRAMAS_MODULOS_ABIERTOS=PMA.COD_PROGRAMAS_MODULOS_ABIERTOS
   --A-2 EL CODIGO DEL PROFESOR EL NOMBRE Y EL NOMBRE DE CERTIFICADO QUE PUEDEN IMPARTIR.
SELECT P.COD_PROF, NOMBRE_PROF,NOMBRE_CERTIFICADO
FROM PROFESORES P INNER JOIN CERTIFICACIONES_PROF CP
ON P.COD_PROF= CP.COD_PROF
INNER JOIN CERTIFICACIONES C
ON CP.COD_CERTIFICACION=C.COD_CERTIFICACION
   -- A-3 MUESTRA QUE PROFESORES NO TIENEN UN PROGRAMA MODULO ABIERTO
   SELECT NOMBRE_PROF,COD_PROGRAMAS_MODULOS_ABIERTOS
FROM PROFESORES P RIGHT JOIN PROGRAMAS_MODULOS_ABIERTOS PMA
	ON P.COD_PROF=PMA.COD_PROF
	WHERE P.COD_PROF IS  NULL;

	--A-4 MUESTRA EL NOMBRE DEL PROGRAMA Y SU IDENTIFICADOR
   SELECT NOMBRE_PROGRAMA,P.COD_PROGRAMA, COD_PROGRAMAS_MODULOS
   FROM PROGRAMAS P INNER JOIN PROGRAMAS_MODULOS PM
   ON P.COD_PROGRAMA=PM.COD_PROGRAMA

   --A-5 MUESTRA NOMBRE EDAD CARNET TELEFONO NUMERO DE RECIBO DEL ESTUDIANTE, EL CODIGO DEL PROGRA
   -- Y EL LABORATORIO DONDE ESTA ENLAZADO
   SELECT NOMBRE_EST,E.EDAD_EST,E.CARNET_EST,TELEFONO_EST,
		M.NUM_RECIBO,PMA.COD_PROGRAMAS_MODULOS_ABIERTOS,LB.COD_LABORATORIO
	FROM ESTUDIANTES E FULL JOIN MATRICULAS M
	ON E.CARNET_EST=M.CARNET_EST
	INNER JOIN DETALLE_MATRICULAS DM
	ON DM.NUM_RECIBO=M.NUM_RECIBO
	INNER JOIN PROGRAMAS_MODULOS_ABIERTOS PMA
	ON DM.COD_PROGRAMAS_MODULOS_ABIERTOS=PMA.COD_PROGRAMAS_MODULOS_ABIERTOS
	INNER JOIN LABORATORIO LB
	ON LB.COD_LABORATORIO=PMA.COD_LABORATORIO

	--A-6 MUESTRA EL NOMBRE DEL PROGRAMA EL CODIGO LA FECHA DE INICIO EL DIA Y LA HORA DE INICIO Y FIN
	SELECT NOMBRE_PROGRAMA,PM.COD_PROGRAMAS_MODULOS,FECHA_INICIO,DIA,HORA_INICIO,HORA_FIN
	FROM PROGRAMAS P INNER JOIN PROGRAMAS_MODULOS PM
	ON P.COD_PROGRAMA=PM.COD_PROGRAMA
	INNER JOIN PROGRAMAS_MODULOS_ABIERTOS PMA
	ON PM.COD_PROGRAMAS_MODULOS=PMA.COD_PROGRAMAS_MODULOS
	INNER JOIN HORARIOS H
    ON PMA.COD_PROGRAMAS_MODULOS_ABIERTOS=H.COD_PROGRAMAS_MODULOS_ABIERTOS;

	--CONSULTAS GRUPO BY
	--B-1 MUESTRA EL MODULO CON EL COSTO MINIMO
	SELECT MIN(PRECIO_MODULO) AS MODULO_MENOR_COSTO
	FROM MODULOS
	--B-2 MUESTRA EL MODULO CON EL COSTO MAS ALTO
	SELECT MAX(PRECIO_MODULO) AS MODULO_MAYOR_COSTO
	FROM MODULOS
	--B-3 MUESTRA LOS PAGOS TOTALES A REALIZAR POR LOS ESTUDIANTES
	SELECT E.CARNET_EST,
	NOMBRE_EST+' '+ APELLIDO1_EST+' '+APELLIDO2_EST AS NOMBRE_COMPLETO,
	SUM(MONTO) AS PAGOS_TOTALES
	FROM ESTUDIANTES E INNER JOIN MATRICULAS M
	ON E.CARNET_EST=M.CARNET_EST
	GROUP BY E.CARNET_EST, NOMBRE_EST,APELLIDO1_EST,APELLIDO2_EST;
   --B-4 MUESTRA EL PRECIO TOTAL DE LOS PROGRAMAS
   SELECT DISTINCT NOMBRE_PROGRAMA,SUM(PRECIO_PROGRAMA) AS PRECIO_TOTAL_PROGRAMAS
	FROM PROGRAMAS
	GROUP BY NOMBRE_PROGRAMA
	--B-5 MUESTRA EL NOMBRE DEL PROFESOR Y LOS DIAS QUE DAN LECCIONES
	SELECT UPPER (NOMBRE_PROF+' '+APELLIDO1_PROF+' '+APELLIDO2_PROF) AS NOMBRE_COMPLETO,DIA
	FROM PROFESORES P INNER JOIN PROGRAMAS_MODULOS_ABIERTOS PMA
	ON P.COD_PROF=PMA.COD_PROF
	INNER JOIN HORARIOS H
	ON PMA.COD_PROGRAMAS_MODULOS_ABIERTOS=H.COD_PROGRAMAS_MODULOS_ABIERTOS
	--B-6 MUESTRA EL NOMBRE DEL PROGRAMA Y EL TOTAL DE HORAS
	SELECT NOMBRE_PROGRAMA,SUM(HORAS_MODULO) AS TOTAL_HORAS
	FROM MODULOS M INNER JOIN PROGRAMAS_MODULOS PM
	ON PM.COD_MODULO = M.COD_MODULO
	INNER JOIN PROGRAMAS P
	ON PM.COD_PROGRAMA=P.COD_PROGRAMA
	GROUP BY NOMBRE_PROGRAMA
	--B-7 MUESTRA LA CANTIDAD DE MATRICULAS DE CADA ESTUDIANTE
	SELECT NOMBRE_EST, E.CARNET_EST,
	COUNT(DM.COD_PROGRAMAS_MODULOS_ABIERTOS) AS CANTIDAD_MATRICULAS
	FROM ESTUDIANTES E INNER JOIN MATRICULAS M
	ON E.CARNET_EST=M.CARNET_EST
	INNER JOIN DETALLE_MATRICULAS DM
	ON M.NUM_RECIBO=DM.NUM_RECIBO
	INNER JOIN PROGRAMAS_MODULOS_ABIERTOS PMA
	ON DM.COD_PROGRAMAS_MODULOS_ABIERTOS= PMA.COD_PROGRAMAS_MODULOS_ABIERTOS
	WHERE E.CARNET_EST=M.CARNET_EST
	GROUP BY NOMBRE_EST,E.CARNET_EST
	--B-8 MUESTRA LA NOMBRE PROFESORES LA CANTIDAD DE CURSOS ABIERTOS LA FECHA DE INICIO DEL CURSO Y LA UBICACION DE LABORATORIO
	SELECT NOMBRE_PROF,CONVERT ( VARCHAR, FECHA_INICIO, 101),UBICACION,
	COUNT (COD_PROGRAMAS_MODULOS_ABIERTOS) AS CANTIDAD_ABIERTOS
	FROM PROFESORES P INNER JOIN PROGRAMAS_MODULOS_ABIERTOS PMA
	ON P.COD_PROF=PMA.COD_PROF
	INNER JOIN LABORATORIO L
	ON L.COD_LABORATORIO=PMA.COD_LABORATORIO
	GROUP BY NOMBRE_PROF,FECHA_INICIO,UBICACION;
	--B-9 MUESTRA LA FECHA Y EL PROMEDIO DE LA MATRICULA
	SELECT FECHA,MONTO
    FROM MATRICULAS
	WHERE MONTO>ALL
		(SELECT AVG (MONTO)
		FROM MATRICULAS
		GROUP BY ENCARGADO_MATRICULA);

	--CONSULTAS SUB O UNIONES
	--C-1 MUESTRA NOMBRE DE PROGRAMA Y UNE CON NOMBRE PROFESOR
	SELECT NOMBRE_PROGRAMA, 'NO APLICA' AS NO_COINCIDEN
	FROM PROGRAMAS
	UNION
	SELECT NOMBRE_PROF,APELLIDO2_PROF
	FROM PROFESORES P INNER JOIN PROGRAMAS_MODULOS_ABIERTOS PMA
	ON P.COD_PROF= PMA.COD_PROF
	INNER JOIN PROGRAMAS_MODULOS PM
	ON PMA.COD_PROGRAMAS_MODULOS=PM.COD_PROGRAMAS_MODULOS
	ORDER BY NOMBRE_PROGRAMA;
	--C-2 MUESTRA NOMBRE PROGRAMA MODULO PROFESORES Y LA FECHA DE INGRESO DE LOS ESTUDIANTES
	SELECT  NOMBRE_PROGRAMA FROM PROGRAMAS
	UNION
	SELECT NOMBRE_MODULO FROM MODULOS
	UNION
	SELECT NOMBRE_PROF FROM PROFESORES
	UNION
	SELECT CAST(FECHA_INGRESO_EST AS VARCHAR (20)) FROM ESTUDIANTES
	ORDER BY NOMBRE_PROGRAMA;
	-- ORDENANDO DATOS
	--D1  -- SELECCIONAR LA FECHA Y EL MONTO DE LOS MONTOS SUPERIORES AL PROMEDIO
		  SELECT FECHA, MONTO FROM MATRICULAS
		  WHERE MONTO>(SELECT AVG(MONTO) FROM MATRICULAS);
	--D2 MUESTRA EL ESTUDIANTE QUE NO TIENE MATRICULAS
	SELECT NOMBRE_EST
FROM ESTUDIANTES E LEFT JOIN MATRICULAS M
	ON E.CARNET_EST=M.CARNET_EST
	WHERE M.CARNET_EST IS NULL;


	-- CONSULTAS VARIADAS A MI DECISION
	--E1 MUESTRA EL REGISTRO DEL ESTUDIANTE DEL CARNET NA205
		SELECT NOMBRE_EST,APELLIDO1_EST,APELLIDO2_EST,CARNET_EST
	FROM ESTUDIANTES
	WHERE CARNET_EST='NA205'
	--E2 MUESTRA EL CODIGO DE ESTUDIANTE Y EL MONTO A PAGAR
	     SELECT CARNET_EST, SUM(MONTO)
		  FROM MATRICULAS
		  GROUP BY CARNET_EST;
   --E-3 CUENTA LOS CARNET DE ESTUDIANTES
     SELECT COUNT(DISTINCT CARNET_EST) FROM MATRICULAS
   --E-4 SUMA LA CANTIDAD A PAGAR POR EL CARNET DADO
	 SELECT SUM(MONTO)AS TOTAL FROM MATRICULAS WHERE CARNET_EST = 'NA201';
		                 
										--------
										--------
										--------
							--PROCEDIMIENTOS ALMACENADOS--
--CRUD ("Crear, Leer, Actualizar, Borrar") para cada tabla

--PROCEDIMIENTOS PARA ESTUDIANTES
--1-AÑADIR UN ESTUDIANTE NUEVO
SELECT*FROM ESTUDIANTES
GO
CREATE OR ALTER PROCEDURE SP_CREAR_ESTUDIANTE(@CARNET_EST VARCHAR(30) OUT,
								     @CEDULA_EST INT,
								     @NOMBRE_EST VARCHAR(30),
									 @APELLIDO1_EST VARCHAR(30),
									 @APELLIDO2_EST VARCHAR(30),
									 @CORREO_EST VARCHAR(30),
									 @EDAD_EST INT,
									 @TELEFONO_EST INT,
									 @FECHA_INGRESO_EST DATE,
									 @BORRADO_EST BIT,
								     @MSJ VARCHAR(50) OUT)
AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF (NOT EXISTS (SELECT 1 FROM ESTUDIANTES WHERE CARNET_EST=@CARNET_EST))
		BEGIN
		 INSERT INTO ESTUDIANTES(CARNET_EST,CEDULA_EST,NOMBRE_EST,APELLIDO1_EST,APELLIDO2_EST,
		                         CORREO_EST,EDAD_EST,TELEFONO_EST,FECHA_INGRESO_EST,BORRADO_EST)
		 VALUES(@CARNET_EST,@CEDULA_EST,@NOMBRE_EST,@APELLIDO1_EST,@APELLIDO2_EST,@CORREO_EST,@EDAD_EST,
		        @TELEFONO_EST,@FECHA_INGRESO_EST,@BORRADO_EST)
		 SET @MSJ='ESTUDIANTE AÑADIDO DE MANERA CORRECTO'
		END
		ELSE
		BEGIN 
		   IF EXISTS (SELECT 1 FROM ESTUDIANTES WHERE CARNET_EST=@CARNET_EST)
		 SET @MSJ='EL ESTUDIANTE YA FUE AÑADIDO'
		END     
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
    ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO
 --------------------------------
 -- EJECUCION  SP_CREAR_ESTUDIANTE --
GO

DECLARE @RC int
DECLARE @CARNET_EST varchar(30)
DECLARE @CEDULA_EST INT
DECLARE @NOMBRE_EST varchar(30)
DECLARE @APELLIDO1_EST varchar(30)
DECLARE @APELLIDO2_EST varchar(30)
DECLARE @CORREO_EST varchar(30)
DECLARE @EDAD_EST int
DECLARE @TELEFONO_EST int
DECLARE @FECHA_INGRESO_EST date
DECLARE @BORRADO_EST bit
DECLARE @MSJ varchar(50)

-- TODO: Set parameter values here.
SET @CARNET_EST= 'NA212'
SET @CEDULA_EST= 208130035
SET @NOMBRE_EST= 'JAFET DANIEL'
SET @APELLIDO1_EST='ULATE'
SET @APELLIDO2_EST='ALVAREZ'
SET @CORREO_EST= 'JORGEGILVER45@GMAIL.COM'
SET @EDAD_EST= 22
SET @TELEFONO_EST=86453779
SET @FECHA_INGRESO_EST='2021-08-04'
SET @BORRADO_EST=0
EXECUTE @RC = [dbo].[SP_CREAR_ESTUDIANTE] 
   @CARNET_EST OUTPUT
  ,@CEDULA_EST
  ,@NOMBRE_EST
  ,@APELLIDO1_EST
  ,@APELLIDO2_EST
  ,@CORREO_EST
  ,@EDAD_EST
  ,@TELEFONO_EST
  ,@FECHA_INGRESO_EST
  ,@BORRADO_EST
  ,@MSJ OUTPUT
  PRINT @MSJ
GO
SELECT*FROM ESTUDIANTES
------------------------------------
------------------------------------
--2 ACTUALIZAR LOS DATOS DE UN ESTUDAINTE
GO
CREATE OR ALTER PROCEDURE SP_ACTUALIZAR_ESTUDIANTE(@CARNET_EST VARCHAR(30) OUT,
								     @CEDULA_EST INT,
								     @NOMBRE_EST VARCHAR(30),
									 @APELLIDO1_EST VARCHAR(30),
									 @APELLIDO2_EST VARCHAR(30),
									 @CORREO_EST VARCHAR(30),
									 @EDAD_EST INT,
									 @TELEFONO_EST INT,
									 @FECHA_INGRESO_EST DATE,
									 @BORRADO_EST BIT,
								     @MSJ VARCHAR(50) OUT)
AS
	BEGIN TRY
	 BEGIN TRANSACTION 
	   BEGIN
		UPDATE ESTUDIANTES SET CARNET_EST=@CARNET_EST, CEDULA_EST=@CEDULA_EST, NOMBRE_EST=@NOMBRE_EST,
		APELLIDO1_EST=@APELLIDO1_EST, APELLIDO2_EST= @APELLIDO2_EST,CORREO_EST=@CORREO_EST, EDAD_EST=@EDAD_EST,
		TELEFONO_EST= @TELEFONO_EST, FECHA_INGRESO_EST=@FECHA_INGRESO_EST ,BORRADO_EST= @BORRADO_EST
		 WHERE CARNET_EST=@CARNET_EST
		 SET @MSJ='ESTUDIANTE ACTUALIZADO SASTIFACTORIAMENTE'
		 END
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
    ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO
 
 -- EJECUCION DEL SP ACTUALIZAR ESTUDIANTE
 GO

DECLARE @RC int
DECLARE @CARNET_EST varchar(30)
DECLARE @CEDULA_EST int
DECLARE @NOMBRE_EST varchar(30)
DECLARE @APELLIDO1_EST varchar(30)
DECLARE @APELLIDO2_EST varchar(30)
DECLARE @CORREO_EST varchar(30)
DECLARE @EDAD_EST int
DECLARE @TELEFONO_EST int
DECLARE @FECHA_INGRESO_EST date
DECLARE @BORRADO_EST bit
DECLARE @MSJ varchar(50)

-- TODO: Set parameter values here.

SET @CARNET_EST= 'NA212'
SET @CEDULA_EST= 208130035
SET @NOMBRE_EST= 'JAFET DANIEL'
SET @APELLIDO1_EST='ULATE'
SET @APELLIDO2_EST='ALVAREZ'
SET @CORREO_EST= 'JORGEGILVER45@GMAIL.COM'
SET @EDAD_EST= 22
SET @TELEFONO_EST=86453779
SET @FECHA_INGRESO_EST='2021-08-04'
SET @BORRADO_EST=0
------
EXECUTE @RC = [dbo].[SP_ACTUALIZAR_ESTUDIANTE] 
   @CARNET_EST OUTPUT
  ,@CEDULA_EST
  ,@NOMBRE_EST
  ,@APELLIDO1_EST
  ,@APELLIDO2_EST
  ,@CORREO_EST
  ,@EDAD_EST
  ,@TELEFONO_EST
  ,@FECHA_INGRESO_EST
  ,@BORRADO_EST
  ,@MSJ OUTPUT
  PRINT @MSJ
GO
-------------------------------------
----------------------------------
-- 3- ELIMINAR DATOS DE ESTUDIANTES
GO
CREATE OR ALTER PROCEDURE SP_ELIMINAR_ESTUDIANTE(@CARNET_EST VARCHAR(30) OUT,
								                 @MSJ VARCHAR(50) OUT)
AS
	BEGIN TRY
	 BEGIN TRANSACTION 
	   BEGIN
		DELETE FROM ESTUDIANTES 
		 WHERE CARNET_EST=@CARNET_EST
		 SET @MSJ='ESTUDIANTE ELIMINADO SASTIFACTORIAMENTE'
		 END
		 BEGIN 
		 IF (NOT EXISTS (SELECT 1 FROM ESTUDIANTES WHERE CARNET_EST=@CARNET_EST))
		 SET @MSJ='EL CODIGO DE ESTUDAINTE QUE INGRESO NO EXISTE'
		  END
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
    ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO

 GO
 -- EJECUCION DE SP_ELIMINAR_ESTUDIANTE
DECLARE @RC int
DECLARE @CARNET_EST varchar(30)
DECLARE @MSJ varchar(50)

-- TODO: Set parameter values here.
SET @CARNET_EST='NA245'

EXECUTE @RC = [dbo].[SP_ELIMINAR_ESTUDIANTE] 
   @CARNET_EST OUTPUT
  ,@MSJ OUTPUT
  PRINT @MSJ
GO
--------------------------------
--------------------------------
GO
-- 4- LEER LOS DATOS DE UN ESTUDIANTE--
CREATE OR ALTER PROCEDURE SP_LEER_ESTUDIANTES
AS
BEGIN
    BEGIN TRY
        SELECT * FROM ESTUDIANTES;
    END TRY
    BEGIN CATCH
        SELECT ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
END
GO

GO
-- EJECUCION DE SP_LEER_ESTUDIANTES
DECLARE @RC int

-- TODO: Set parameter values here.

EXECUTE @RC = [dbo].[SP_LEER_ESTUDIANTES] 
GO



------------
--
-----------
--PROCEDIMIENTOS ALMACENADOS PARA LA TABLA DE PROFESORES
--1-AÑADIR UN PROFESOR NUEVO
SELECT*FROM PROFESORES
GO
CREATE OR ALTER PROCEDURE SP_CREAR_PROFESOR(@COD_PROF INT OUT,
										@NOMBRE_PROF varchar(20), 
										@APELLIDO1_PROF varchar(20) ,
										@APELLIDO2_PROF varchar(20), 
										@TELEFONO_PROF int,
										@CORREO_PROF varchar(30),
										@CEDULA_PROF VARCHAR (30),
										@BORRADO_PROF bit,
										@MSJ VARCHAR (50) OUT)

AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF (NOT EXISTS (SELECT 1 FROM PROFESORES WHERE @COD_PROF=COD_PROF))
		BEGIN
		 INSERT INTO PROFESORES(COD_PROF,NOMBRE_PROF,APELLIDO1_PROF,APELLIDO2_PROF,TELEFONO_PROF,CORREO_PROF,CEDULA_PROF,BORRADO_PROF)
		 VALUES(@COD_PROF,@NOMBRE_PROF,@APELLIDO1_PROF,@APELLIDO2_PROF,@TELEFONO_PROF,@CORREO_PROF,@CEDULA_PROF,@BORRADO_PROF)
		 SET @MSJ='PROFESOR AÑADIDO DE MANERA CORRECTA'
		END
		ELSE
		BEGIN 
		   IF EXISTS (SELECT 1 FROM PROFESORES WHERE @COD_PROF=COD_PROF)
		 SET @MSJ='EL PROFESOR YA FUE AÑADIDO'
		END     
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
    ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO
 --------------------------------
 -- EJECUCION  SP_CREAR_PROFESOR --
GO

DECLARE @RC int
DECLARE @COD_PROF int
DECLARE @NOMBRE_PROF varchar(20)
DECLARE @APELLIDO1_PROF varchar(20)
DECLARE @APELLIDO2_PROF varchar(20)
DECLARE @TELEFONO_PROF int
DECLARE @CORREO_PROF varchar(30)
DECLARE @CEDULA_PROF VARCHAR(30)
DECLARE @BORRADO_PROF BIT
DECLARE @MSJ varchar(30)

-- TODO: Set parameter values here.
SET @COD_PROF='110'
SET @NOMBRE_PROF='DANIEL'
SET @APELLIDO1_PROF='ALVAREZ'
SET @APELLIDO2_PROF='ULATE'
SET @CORREO_PROF='INAPROF1212@GMAIL.COM'
SET @TELEFONO_PROF='86453775'
SET @CEDULA_PROF='20813-0012'
SET @BORRADO_PROF=0
EXECUTE @RC = [dbo].[SP_CREAR_PROFESOR] 
   @COD_PROF OUTPUT
  ,@NOMBRE_PROF
  ,@APELLIDO1_PROF
  ,@APELLIDO2_PROF
   ,@TELEFONO_PROF
  ,@CORREO_PROF
  ,@CEDULA_PROF
  ,@BORRADO_PROF
  ,@MSJ OUTPUT
  PRINT @MSJ
GO



------------------------------------
------------------------------------
--2-ACTUALIZAR UN PROFESOR NUEVO
SELECT*FROM PROFESORES
GO
CREATE OR ALTER PROCEDURE SP_ACTUALIZAR_PROFESOR(@COD_PROF INT OUT,
										@NOMBRE_PROF varchar(20), 
										@APELLIDO1_PROF varchar(20) ,
										@APELLIDO2_PROF varchar(20), 
										@TELEFONO_PROF int,
										@CORREO_PROF varchar(30),
										@CEDULA_PROF VARCHAR (30),
										@BORRADO_PROF bit,
										@MSJ VARCHAR (50) OUT)

AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF ( EXISTS (SELECT 1 FROM PROFESORES WHERE @COD_PROF=COD_PROF))
		BEGIN
		UPDATE PROFESORES SET COD_PROF=@COD_PROF,NOMBRE_PROF=@NOMBRE_PROF,APELLIDO1_PROF=@APELLIDO1_PROF
		,APELLIDO2_PROF=@APELLIDO2_PROF,TELEFONO_PROF=@TELEFONO_PROF,CORREO_PROF=@CORREO_PROF
		,CEDULA_PROF=@CEDULA_PROF,BORRADO_PROF=@BORRADO_PROF
		WHERE COD_PROF=@COD_PROF
		 SET @MSJ='PROFESOR ACTUALIZADO DE MANERA CORRECTA'
		END
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
    ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO
 --------------------------------
 -- EJECUCION  SP_CREAR_PROFESOR --
GO

DECLARE @RC int
DECLARE @COD_PROF int
DECLARE @NOMBRE_PROF varchar(20)
DECLARE @APELLIDO1_PROF varchar(20)
DECLARE @APELLIDO2_PROF varchar(20)
DECLARE @TELEFONO_PROF int
DECLARE @CORREO_PROF varchar(30)
DECLARE @CEDULA_PROF varchar(30)
DECLARE @BORRADO_PROF bit
DECLARE @MSJ varchar(50)

-- TODO: Set parameter values here.
SET @COD_PROF='110'
SET @NOMBRE_PROF='MIGUEL'
SET @APELLIDO1_PROF='ALVAREZ'
SET @APELLIDO2_PROF='ULATE'
SET @CORREO_PROF='INAPROF1212@GMAIL.COM'
SET @TELEFONO_PROF='86453775'
SET @CEDULA_PROF='20813-0012'
SET @BORRADO_PROF=0

EXECUTE @RC = [dbo].[SP_ACTUALIZAR_PROFESOR] 
   @COD_PROF OUTPUT
  ,@NOMBRE_PROF
  ,@APELLIDO1_PROF
  ,@APELLIDO2_PROF
  ,@TELEFONO_PROF
  ,@CORREO_PROF
  ,@CEDULA_PROF
  ,@BORRADO_PROF
  ,@MSJ OUTPUT
  PRINT @MSJ
GO
SELECT*FROM PROFESORES




-------------------------------------
----------------------------------
-- 3- ELIMINAR DATOS DE PROFESOR
SELECT*FROM PROFESORES
GO
CREATE OR ALTER PROCEDURE SP_ELIMINAR_PROFESOR(@COD_PROF INT OUT,
										@NOMBRE_PROF varchar(20), 
										@APELLIDO1_PROF varchar(20) ,
										@APELLIDO2_PROF varchar(20), 
										@TELEFONO_PROF int,
										@CORREO_PROF varchar(30),
										@CEDULA_PROF VARCHAR (30),
										@BORRADO_PROF bit,
										@MSJ VARCHAR (50) OUT)

AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF ( EXISTS (SELECT 1 FROM PROFESORES WHERE @COD_PROF=COD_PROF))
		BEGIN
		DELETE FROM PROFESORES
		WHERE COD_PROF=@COD_PROF
		 SET @MSJ='PROFESOR ELIMINADO DE MANERA CORRECTA'
		END
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
    ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO
 -- EJECUCION DE SP_ELIMINAR_ESTUDIANTE
 GO

DECLARE @RC int
DECLARE @COD_PROF int
DECLARE @NOMBRE_PROF varchar(20)
DECLARE @APELLIDO1_PROF varchar(20)
DECLARE @APELLIDO2_PROF varchar(20)
DECLARE @TELEFONO_PROF int
DECLARE @CORREO_PROF varchar(30)
DECLARE @CEDULA_PROF varchar(30)
DECLARE @BORRADO_PROF bit
DECLARE @MSJ varchar(50)

-- TODO: Set parameter values here.
SET @COD_PROF='110'
EXECUTE @RC = [dbo].[SP_ELIMINAR_PROFESOR] 
   @COD_PROF OUTPUT
  ,@NOMBRE_PROF
  ,@APELLIDO1_PROF
  ,@APELLIDO2_PROF
  ,@TELEFONO_PROF
  ,@CORREO_PROF
  ,@CEDULA_PROF
  ,@BORRADO_PROF
  ,@MSJ OUTPUT
  PRINT @MSJ
GO



--------------------------------
--------------------------------
-- 4- LEER LOS DATOS DE UN PROFESOR--
GO
CREATE OR ALTER PROCEDURE SP_LEER_PROFESORES
AS
BEGIN
    BEGIN TRY
        SELECT * FROM PROFESORES;
    END TRY
    BEGIN CATCH
        SELECT ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
END
GO
-- EJECUCION DE SP_LEER_ESTUDIANTES
GO

DECLARE @RC int

-- TODO: Set parameter values here.

EXECUTE @RC = [dbo].[SP_LEER_PROFESORES] 
GO

-----
-----

--PROCEDIMIENTOS ALMACENADOS A LA TABLA  MODULOS
-- 1- CREAR MODULO
GO
CREATE OR ALTER PROCEDURE SP_CREAR_MODULO(@COD_MODULO VARCHAR(10) OUT,
										@NOMBRE_MODULO varchar(20), 
										@PRECIO_MODULO INT,
										@HORAS_MODULO INT,
										@MSJ VARCHAR (50) OUT)

AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF (NOT EXISTS (SELECT 1 FROM MODULOS WHERE @COD_MODULO=COD_MODULO))
		BEGIN
		 INSERT INTO MODULOS(COD_MODULO,NOMBRE_MODULO,PRECIO_MODULO,HORAS_MODULO)
		 VALUES(@COD_MODULO,@NOMBRE_MODULO,@PRECIO_MODULO,@HORAS_MODULO)
		 SET @MSJ='MODULO AÑADIDO DE MANERA CORRECTA'
		END
		ELSE
		BEGIN 
		   IF EXISTS (SELECT 1 FROM MODULOS WHERE @COD_MODULO=COD_MODULO)
		 SET @MSJ='EL MODULO YA FUE AÑADIDO'
		END     
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
    ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO
 -- EJECUCION DEL SP_CREAR_MODULO
 GO

DECLARE @RC int
DECLARE @COD_MODULO varchar(10)
DECLARE @NOMBRE_MODULO varchar(20)
DECLARE @PRECIO_MODULO int
DECLARE @HORAS_MODULO int
DECLARE @MSJ varchar(50)

-- TODO: Set parameter values here.

SET @COD_MODULO='PROGRA'
SET @NOMBRE_MODULO='C++'
SET @PRECIO_MODULO=250000
SET @HORAS_MODULO=400


EXECUTE @RC = [dbo].[SP_CREAR_MODULO] 
   @COD_MODULO OUTPUT
  ,@NOMBRE_MODULO
  ,@PRECIO_MODULO
  ,@HORAS_MODULO
  ,@MSJ OUTPUT
  PRINT @MSJ
GO
SELECT*FROM MODULOS
--
--
-- 2- ACTUALIZAR MODULO
GO
CREATE OR ALTER PROCEDURE SP_ACTUALIZAR_MODULO(@COD_MODULO VARCHAR(10) OUT,
										@NOMBRE_MODULO varchar(20), 
										@PRECIO_MODULO INT,
										@HORAS_MODULO INT,
										@MSJ VARCHAR (50) OUT)

AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF (EXISTS (SELECT 1 FROM MODULOS WHERE @COD_MODULO=COD_MODULO))
		BEGIN
		UPDATE MODULOS SET COD_MODULO=@COD_MODULO, NOMBRE_MODULO=@NOMBRE_MODULO,PRECIO_MODULO=@PRECIO_MODULO,HORAS_MODULO=@HORAS_MODULO
		WHERE COD_MODULO=@COD_MODULO
		 SET @MSJ='MODULO ACTUALIZADO DE MANERA CORRECTA'
		END
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
    ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO
-- EJECUCION DE SP_ACTUALIZAR MODULO
GO

DECLARE @RC int
DECLARE @COD_MODULO varchar(10)
DECLARE @NOMBRE_MODULO varchar(20)
DECLARE @PRECIO_MODULO int
DECLARE @HORAS_MODULO int
DECLARE @MSJ varchar(50)

-- TODO: Set parameter values here.

SET @COD_MODULO='PROGRA'
SET @NOMBRE_MODULO='C++'
SET @PRECIO_MODULO=250000
SET @HORAS_MODULO=600


EXECUTE @RC = [dbo].[SP_ACTUALIZAR_MODULO] 
   @COD_MODULO OUTPUT
  ,@NOMBRE_MODULO
  ,@PRECIO_MODULO
  ,@HORAS_MODULO
  ,@MSJ OUTPUT
  PRINT @MSJ
GO

SELECT*FROM MODULOS
------
------
-- 3- ELIMINAR MODULO
 GO
CREATE OR ALTER PROCEDURE SP_ELIMINAR_MODULO(@COD_MODULO VARCHAR(10) OUT,
										@NOMBRE_MODULO varchar(20), 
										@PRECIO_MODULO INT,
										@HORAS_MODULO INT,
										@MSJ VARCHAR (50) OUT)

AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF (EXISTS (SELECT 1 FROM MODULOS WHERE @COD_MODULO=COD_MODULO))
		BEGIN
		DELETE FROM MODULOS
		WHERE COD_MODULO=@COD_MODULO
		 SET @MSJ='MODULO ACTUALIZADO DE MANERA CORRECTA'
		END
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
    ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO

 -- EJECUCION DE SP_ELIMINAR_MODULO
 GO

DECLARE @RC int
DECLARE @COD_MODULO varchar(10)
DECLARE @NOMBRE_MODULO varchar(20)
DECLARE @PRECIO_MODULO int
DECLARE @HORAS_MODULO int
DECLARE @MSJ varchar(50)

-- TODO: Set parameter values here.

SET @COD_MODULO='COD_PRB'

EXECUTE @RC = [dbo].[SP_ELIMINAR_MODULO] 
   @COD_MODULO OUTPUT
  ,@NOMBRE_MODULO
  ,@PRECIO_MODULO
  ,@HORAS_MODULO
  ,@MSJ OUTPUT
  PRINT @MSJ
GO
----
-----
-- 4- LEER LOS REGISTROS DE MODULOS
GO
CREATE OR ALTER PROCEDURE SP_LEER_MODULOS
AS
BEGIN
    BEGIN TRY
        SELECT * FROM MODULOS
    END TRY
    BEGIN CATCH
        SELECT ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
END
GO
-- EJECUCION DE SP_LEER_ESTUDIANTES
GO
DECLARE @RC int

-- TODO: Set parameter values here.

EXECUTE @RC = [dbo].[SP_LEER_MODULOS] 
GO


-------------------
-------------------
-- PROCESOS ALMACENADOS PARA LA TABLA PROGRAMAS
-- 1- CREAR PROGRAMA
GO
CREATE OR ALTER PROCEDURE SP_CREAR_PROGRAMA(@COD_PROGRAMA VARCHAR(10) OUT,
										@NOMBRE_PROGRAMA varchar(20), 
										@PRECIO_PROGRAMA INT,
										@HORAS_PROGRAMA INT,
										@MSJ VARCHAR (50) OUT)

AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF (NOT EXISTS (SELECT 1 FROM PROGRAMAS WHERE @COD_PROGRAMA=COD_PROGRAMA))
		BEGIN
		 INSERT INTO PROGRAMAS(COD_PROGRAMA,NOMBRE_PROGRAMA,PRECIO_PROGRAMA,HORAS_PROGRAMA)
		 VALUES(@COD_PROGRAMA,@NOMBRE_PROGRAMA,@PRECIO_PROGRAMA,@HORAS_PROGRAMA)
		 SET @MSJ='PROGRAMA AÑADIDO DE MANERA CORRECTA'
		END
		ELSE
		BEGIN 
		   IF EXISTS (SELECT 1 FROM PROGRAMAS WHERE @COD_PROGRAMA=COD_PROGRAMA)
		 SET @MSJ='EL PROGRAMA YA FUE AÑADIDO'
		END     
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
    ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO

 -- EJECUCION DEL SP_CREAR_PROGRAMA
 GO

DECLARE @RC int
DECLARE @COD_PROGRAMA varchar(10)
DECLARE @NOMBRE_PROGRAMA varchar(20)
DECLARE @PRECIO_PROGRAMA int
DECLARE @HORAS_PROGRAMA int
DECLARE @MSJ varchar(50)

-- TODO: Set parameter values here.
SET @COD_PROGRAMA='COD_PRO_PB'
SET @NOMBRE_PROGRAMA='INTERNET DE LAS COSAS'
SET @PRECIO_PROGRAMA= 500000
SET @HORAS_PROGRAMA=800
EXECUTE @RC = [dbo].[SP_CREAR_PROGRAMA] 
   @COD_PROGRAMA OUTPUT
  ,@NOMBRE_PROGRAMA
  ,@PRECIO_PROGRAMA
  ,@HORAS_PROGRAMA
  ,@MSJ OUTPUT
  PRINT @MSJ
GO
SELECT* FROM PROGRAMAS
---
---
-- 2- ACTUALIZAR LOS PROGRAMAS
GO
CREATE OR ALTER PROCEDURE SP_ACTUALIZAR_PROGRAMAS(@COD_PROGRAMA VARCHAR(10) OUT,
										@NOMBRE_PROGRAMA varchar(20), 
										@PRECIO_PROGRAMA INT,
										@HORAS_PROGRAMA INT,
										@MSJ VARCHAR (50) OUT)


AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF (EXISTS (SELECT 1 FROM PROGRAMAS WHERE @COD_PROGRAMA=COD_PROGRAMA))
		BEGIN
		UPDATE PROGRAMAS SET COD_PROGRAMA=@COD_PROGRAMA, NOMBRE_PROGRAMA=@NOMBRE_PROGRAMA,PRECIO_PROGRAMA=@PRECIO_PROGRAMA,HORAS_PROGRAMA=@HORAS_PROGRAMA
		WHERE COD_PROGRAMA=@COD_PROGRAMA
		 SET @MSJ='PROGRAMA ACTUALIZADO DE MANERA CORRECTA'
		END
		ELSE 
		  BEGIN
		  IF (NOT EXISTS (SELECT 1 FROM PROGRAMAS WHERE @COD_PROGRAMA=COD_PROGRAMA))
		  SET @MSJ='EL CODIGO DE PROGRAMA INGRESADO NO EXISTE'
		  END
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
    ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO

 -- EJECUCION DEL SP_ACTUALIZAR_PROGRAMAS
 GO

DECLARE @RC int
DECLARE @COD_PROGRAMA varchar(10)
DECLARE @NOMBRE_PROGRAMA varchar(20)
DECLARE @PRECIO_PROGRAMA int
DECLARE @HORAS_PROGRAMA int
DECLARE @MSJ varchar(50)

-- TODO: Set parameter values here.
SET @COD_PROGRAMA='COD_PRO_PB'
SET @NOMBRE_PROGRAMA='INTERNET DE LAS COSAS'
SET @PRECIO_PROGRAMA= 500000
SET @HORAS_PROGRAMA=80
EXECUTE @RC = [dbo].[SP_ACTUALIZAR_PROGRAMAS] 
   @COD_PROGRAMA OUTPUT
  ,@NOMBRE_PROGRAMA
  ,@PRECIO_PROGRAMA
  ,@HORAS_PROGRAMA
  ,@MSJ OUTPUT
  PRINT @MSJ
GO
SELECT*FROM PROGRAMAS
---
---
--- 3- ELIMINAR PROGRAMAS
GO
CREATE OR ALTER PROCEDURE SP_ELIMINAR_PROGRAMAS(@COD_PROGRAMA VARCHAR(10) OUT,
										@NOMBRE_PROGRAMA varchar(20), 
										@PRECIO_PROGRAMA INT,
										@HORAS_PROGRAMA INT,
										@MSJ VARCHAR (50) OUT)


AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF (EXISTS (SELECT 1 FROM PROGRAMAS WHERE @COD_PROGRAMA=COD_PROGRAMA))
		BEGIN
		DELETE FROM PROGRAMAS
		WHERE @COD_PROGRAMA=COD_PROGRAMA
		 SET @MSJ='PROGRAMA ELIMINADO DE MANERA CORRECTA'
		END
		ELSE 
		  BEGIN
		  IF (NOT EXISTS (SELECT 1 FROM PROGRAMAS WHERE @COD_PROGRAMA=COD_PROGRAMA))
		  SET @MSJ='EL CODIGO DE PROGRAMA INGRESADO NO EXISTE'
		  END
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
    ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO

 -- EJECUCION DE EL SP_ELIMINAR_PROGRAMAS
 GO

DECLARE @RC int
DECLARE @COD_PROGRAMA varchar(10)
DECLARE @NOMBRE_PROGRAMA varchar(20)
DECLARE @PRECIO_PROGRAMA int
DECLARE @HORAS_PROGRAMA int
DECLARE @MSJ varchar(50)

-- TODO: Set parameter values here.
SET @COD_PROGRAMA='COD_PRO_PB'

EXECUTE @RC = [dbo].[SP_ELIMINAR_PROGRAMAS] 
   @COD_PROGRAMA OUTPUT
  ,@NOMBRE_PROGRAMA
  ,@PRECIO_PROGRAMA
  ,@HORAS_PROGRAMA
  ,@MSJ OUTPUT
  PRINT @MSJ
GO
SELECT*FROM PROGRAMAS
---
---
-- 4- LEER REGISTROS DE PROGRAMAS
GO
CREATE OR ALTER PROCEDURE SP_LEER_PROGRAMAS
AS
BEGIN
    BEGIN TRY
        SELECT * FROM PROGRAMAS
    END TRY
    BEGIN CATCH
        SELECT ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
END
GO
-- EJECUCION DE SP_LEER_ESTUDIANTES
GO
DECLARE @RC int

-- TODO: Set parameter values here.

EXECUTE @RC = [dbo].[SP_LEER_PROGRAMAS] 
GO

----
----

-- PROCESOS ALMACENADOS DE LA TABLA PROGRAMAS MODULOS
-- 1- CREAR PROGRAMA MODULO
GO
CREATE OR ALTER PROCEDURE SP_CREAR_PROGRAMA_MODULO(@COD_PROGRAMA_MODULO INT OUT,
										@COD_PROGRAMA VARCHAR (10),
										@COD_MODULO VARCHAR (10),
										@MSJ VARCHAR (50) OUT)
AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF (NOT EXISTS (SELECT 1 FROM PROGRAMAS_MODULOS 
		WHERE COD_PROGRAMAS_MODULOS=@COD_PROGRAMA_MODULO))
		BEGIN
		 INSERT INTO PROGRAMAS_MODULOS(COD_PROGRAMA,COD_MODULO)
		 VALUES(@COD_PROGRAMA,@COD_MODULO)
		 SELECT @COD_PROGRAMA_MODULO= IDENT_CURRENT('PROGRAMAS_MODULOS')
		 SET @MSJ='PROGRAMA AÑADIDO DE MANERA CORRECTA'
		END
		ELSE
		BEGIN 
		   IF EXISTS (SELECT 1 FROM PROGRAMAS_MODULOS WHERE COD_PROGRAMAS_MODULOS=@COD_PROGRAMA_MODULO)
		 SET @MSJ='EL PROGRAMA YA FUE AÑADIDO'
		END     
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
   ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO
 -- EJECUCION DEL SP_CREAR_PROGRAMAS_MODULOS
 GO
DECLARE @RC int 
DECLARE @COD_PROGRAMA_MODULO int
DECLARE @COD_PROGRAMA varchar(10)
DECLARE @COD_MODULO varchar(10)
DECLARE @MSJ varchar(50)

-- TODO: Set parameter values here.
SET @COD_PROGRAMA_MODULO=-1
SET @COD_MODULO='PROGRA'
SET @COD_PROGRAMA='PROG-DM81'
EXECUTE @RC = [dbo].[SP_CREAR_PROGRAMA_MODULO] 
   @COD_PROGRAMA_MODULO OUTPUT
  ,@COD_PROGRAMA
  ,@COD_MODULO
  ,@MSJ OUTPUT
  PRINT @MSJ
GO
SELECT*FROM PROGRAMAS_MODULOS
SELECT*FROM MODULOS
--
-- 
-- 2- ACTUALIZAR PROGRAMAS MODULOS
GO
CREATE OR ALTER PROCEDURE SP_ACTUALIZAR_PROGRAMA_MODULO(@COD_PROGRAMA_MODULO INT OUT,
										@COD_PROGRAMA VARCHAR (10),
										@COD_MODULO VARCHAR (10),
										@MSJ VARCHAR (50) OUT)
AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF (NOT EXISTS (SELECT 1 FROM PROGRAMAS_MODULOS 
		WHERE COD_PROGRAMAS_MODULOS=@COD_PROGRAMA_MODULO))
		BEGIN
		 UPDATE PROGRAMAS_MODULOS SET COD_PROGRAMA=@COD_PROGRAMA,COD_MODULO=@COD_MODULO
		 WHERE COD_PROGRAMAS_MODULOS=@COD_PROGRAMA_MODULO
		 SET @MSJ='PROGRAMA ACTUALIZADO DE MANERA CORRECTA'
		END
		ELSE
		BEGIN 
		   IF EXISTS (SELECT 1 FROM PROGRAMAS_MODULOS WHERE COD_PROGRAMAS_MODULOS=@COD_PROGRAMA_MODULO)
		 SET @MSJ='EL CODIGO INGRESADO NO COINCIDE'
		END     
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
   ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO
 ----
 -----
 --3 ELIMINAR UN PROGRAMA MODULO
 GO
CREATE OR ALTER PROCEDURE SP_ELIMINAR_PROGRAMA_MODULO(@COD_PROGRAMA_MODULO INT OUT,
										@COD_PROGRAMA VARCHAR (10),
										@COD_MODULO VARCHAR (10),
										@MSJ VARCHAR (50) OUT)
AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF ( EXISTS (SELECT 1 FROM PROGRAMAS_MODULOS 
		WHERE COD_PROGRAMAS_MODULOS=@COD_PROGRAMA_MODULO))
		BEGIN
		 DELETE FROM PROGRAMAS_MODULOS
		 WHERE COD_PROGRAMAS_MODULOS=@COD_PROGRAMA_MODULO
		 SET @MSJ='PROGRAMA ACTUALIZADO DE MANERA CORRECTA'
		END
		ELSE
		BEGIN 
		   IF (NOT EXISTS (SELECT 1 FROM PROGRAMAS_MODULOS WHERE COD_PROGRAMAS_MODULOS=@COD_PROGRAMA_MODULO))
		 SET @MSJ='EL CODIGO INGRESADO NO EXISTE'
		END     
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
   ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO
---
---
-- 4-LEER REGISTROS DE PROGRAMAS MODULOS
GO
CREATE OR ALTER PROCEDURE SP_LEER_PROGRAMAS_MODULOS
AS
BEGIN
    BEGIN TRY
        SELECT * FROM PROGRAMAS_MODULOS
    END TRY
    BEGIN CATCH
        SELECT ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
END
GO
-- EJECUCION DE SP_LEER_ESTUDIANTES
GO
DECLARE @RC int

-- TODO: Set parameter values here.

EXECUTE @RC = [dbo].[SP_LEER_PROGRAMAS_MODULOS] 
GO

---
---
-- PROCEDIMIENTOS ALMACENADOS PARA LA TABLA
GO
CREATE OR ALTER PROCEDURE SP_CREAR_LABORATORIO(@COD_LABORATORIO VARCHAR(10) OUT,
										@UBICACION VARCHAR(80),
										@MSJ VARCHAR (50) OUT)
AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF (NOT EXISTS (SELECT 1 FROM LABORATORIO 
		WHERE COD_LABORATORIO=@COD_LABORATORIO))
		BEGIN
		 INSERT INTO LABORATORIO(COD_LABORATORIO,UBICACION)
		 VALUES(@COD_LABORATORIO,@UBICACION)
		 SET @MSJ='LABORATORIO AÑADIDO DE MANERA CORRECTA'
		END
		ELSE
		BEGIN 
		   IF EXISTS (SELECT 1 FROM LABORATORIO WHERE COD_LABORATORIO=@COD_LABORATORIO)
		 SET @MSJ='EL LABORATORIO YA FUE AÑADIDO'
		END     
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
   ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO
 --
 --
 -- 2- ACTUALIZAR LABORATORIO
 GO
CREATE OR ALTER PROCEDURE SP_ACTUALIZAR_LABORATORIO(@COD_LABORATORIO VARCHAR(10) OUT,
										@UBICACION VARCHAR(80),
										@MSJ VARCHAR (50) OUT)
AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF (EXISTS (SELECT 1 FROM LABORATORIO 
		WHERE COD_LABORATORIO=@COD_LABORATORIO))
		BEGIN
		 UPDATE LABORATORIO SET COD_LABORATORIO=@COD_LABORATORIO,UBICACION=@UBICACION
	    WHERE COD_LABORATORIO=@COD_LABORATORIO
		 SET @MSJ='PROGRAMA SE ACTUALIZO DE MANERA CORRECTA'
		END
	ELSE
		BEGIN 
		   IF NOT EXISTS (SELECT 1 FROM LABORATORIO WHERE COD_LABORATORIO=@COD_LABORATORIO)
		 SET @MSJ='EL LABORATORIO NO EXISTE'
		END     
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
   ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO

 --
 --
 -- 3- ELIMINAR LABORATORIOS
  GO
CREATE OR ALTER PROCEDURE SP_ELIMINAR_LABORATORIO(@COD_LABORATORIO VARCHAR(10) OUT,
										@UBICACION VARCHAR(80),
										@MSJ VARCHAR (50) OUT)
AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF (EXISTS (SELECT 1 FROM LABORATORIO 
		WHERE COD_LABORATORIO=@COD_LABORATORIO))
		BEGIN
		 DELETE FROM LABORATORIO
	    WHERE COD_LABORATORIO=@COD_LABORATORIO
		 SET @MSJ='LABORATORIO ELIMINADO DE MANERA CORRECTA'
		END
	ELSE
		BEGIN 
		   IF NOT EXISTS (SELECT 1 FROM LABORATORIO WHERE COD_LABORATORIO=@COD_LABORATORIO)
		 SET @MSJ='EL LABORATORIO NO EXISTE'
		END     
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
   ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO
 -- 
 --
 -- 4- LEER REGISTROS DE LABORATORIOS

 GO
CREATE OR ALTER PROCEDURE SP_LEER_LABORATORIOS
AS
BEGIN
    BEGIN TRY
        SELECT * FROM LABORATORIO
    END TRY
    BEGIN CATCH
        SELECT ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
END
GO
-- EJECUCION DE SP_LEER_ESTUDIANTES
GO
DECLARE @RC int

-- TODO: Set parameter values here.

EXECUTE @RC = [dbo].[SP_LEER_LABORATORIOS] 
GO
--
--
-- PROCESOS ALMACENADOS PARA LA TABLA PROGRAMAS MODULOS ABIERTOS
-- 1- PROCESO DE CREACION
GO
CREATE OR ALTER PROCEDURE SP_CREAR_PROGRAMA_MODULO_ABIERTOS (@COD_PROGRAMAS_MODULOS_ABIERTOS INT OUT,
									@COD_PROF INT ,@COD_PROGRAMAS_MODULOS INT , @FECHA_INICIO date ,
									@COD_LABORATORIO varchar(10)  ,@GRUPO varchar (23),@CUPO int,
									@MSJ VARCHAR (50) OUT)
AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF (NOT EXISTS (SELECT 1 FROM PROGRAMAS_MODULOS_ABIERTOS
		WHERE COD_PROGRAMAS_MODULOS_ABIERTOS=@COD_PROGRAMAS_MODULOS_ABIERTOS))
		BEGIN
		 INSERT INTO PROGRAMAS_MODULOS_ABIERTOS(COD_PROGRAMAS_MODULOS_ABIERTOS,COD_PROF,COD_PROGRAMAS_MODULOS,FECHA_INICIO,
		                                        COD_LABORATORIO,GRUPO,CUPO)
		 VALUES(@COD_PROGRAMAS_MODULOS_ABIERTOS,@COD_PROF,@COD_PROGRAMAS_MODULOS,@FECHA_INICIO,
		                                        @COD_LABORATORIO,@GRUPO,@CUPO)
		 SET @MSJ='PROGRAMA AÑADIDO DE MANERA CORRECTA'
		END
		ELSE
		BEGIN 
		   IF EXISTS (SELECT 1 FROM PROGRAMAS_MODULOS_ABIERTOS WHERE COD_PROGRAMAS_MODULOS_ABIERTOS=@COD_PROGRAMAS_MODULOS_ABIERTOS)
		 SET @MSJ='EL PROGRAMA YA FUE AÑADIDO'
		END     
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
   ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO
---
----
-- 2- PROCESO DE ACTUALIZACION
-- PROCESOS ALMACENADOS PARA LA TABLA PROGRAMAS MODULOS ABIERTOS
GO
CREATE OR ALTER PROCEDURE SP_ACTUALIZAR_PROGRAMA_MODULO_ABIERTOS (@COD_PROGRAMAS_MODULOS_ABIERTOS INT OUT,
									@COD_PROF INT ,@COD_PROGRAMAS_MODULOS INT , @FECHA_INICIO date ,
									@COD_LABORATORIO varchar(10)  ,@GRUPO varchar (23),@CUPO int,
									@MSJ VARCHAR (50) OUT)
AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF ( EXISTS (SELECT 1 FROM PROGRAMAS_MODULOS_ABIERTOS
		WHERE COD_PROGRAMAS_MODULOS_ABIERTOS=@COD_PROGRAMAS_MODULOS_ABIERTOS))
		BEGIN
		UPDATE PROGRAMAS_MODULOS_ABIERTOS SET COD_PROGRAMAS_MODULOS_ABIERTOS =@COD_PROGRAMAS_MODULOS_ABIERTOS ,COD_PROF=@COD_PROF ,COD_PROGRAMAS_MODULOS=@COD_PROGRAMAS_MODULOS
											,FECHA_INICIO=@FECHA_INICIO,COD_LABORATORIO=@COD_LABORATORIO,GRUPO=@GRUPO,CUPO=@CUPO
		            WHERE COD_PROGRAMAS_MODULOS_ABIERTOS=@COD_PROGRAMAS_MODULOS_ABIERTOS                          
		 SET @MSJ='PROGRAMA ACTUALIZO DE MANERA CORRECTA'
		END
		ELSE
		BEGIN 
		   IF NOT EXISTS (SELECT 1 FROM PROGRAMAS_MODULOS_ABIERTOS WHERE COD_PROGRAMAS_MODULOS_ABIERTOS=@COD_PROGRAMAS_MODULOS_ABIERTOS)
		 SET @MSJ='EL PROGRAMA NO EXISTE'
		END     
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
   ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO
 ---
 ---
 -- 3- ELIMINAR PROGRAMAS MODULOS ABIERTOS
 GO
CREATE OR ALTER PROCEDURE SP_ELIMINAR_PROGRAMA_MODULO_ABIERTOS (@COD_PROGRAMAS_MODULOS_ABIERTOS INT OUT,
									@COD_PROF INT ,@COD_PROGRAMAS_MODULOS INT , @FECHA_INICIO date ,
									@COD_LABORATORIO varchar(10)  ,@GRUPO varchar (23),@CUPO int,
									@MSJ VARCHAR (50) OUT)
AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF ( EXISTS (SELECT 1 FROM PROGRAMAS_MODULOS_ABIERTOS
		WHERE COD_PROGRAMAS_MODULOS_ABIERTOS=@COD_PROGRAMAS_MODULOS_ABIERTOS))
		BEGIN
	DELETE FROM PROGRAMAS_MODULOS_ABIERTOS
		            WHERE COD_PROGRAMAS_MODULOS_ABIERTOS=@COD_PROGRAMAS_MODULOS_ABIERTOS                          
		 SET @MSJ='PROGRAMA ELIMINADO DE MANERA CORRECTA'
		END
		ELSE
		BEGIN 
		   IF NOT EXISTS (SELECT 1 FROM PROGRAMAS_MODULOS_ABIERTOS WHERE COD_PROGRAMAS_MODULOS_ABIERTOS=@COD_PROGRAMAS_MODULOS_ABIERTOS)
		 SET @MSJ='EL PROGRAMA NO EXISTE'
		END     
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
   ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO

 --
 ---
 -- 4- LEER REGITROS DE PROGRAMAS MODULOS ABIERTOS
  GO
CREATE OR ALTER PROCEDURE SP_LEER_PROGRAMAS_MODULOS_ABIERTOS
AS
BEGIN
    BEGIN TRY
        SELECT * FROM PROGRAMAS_MODULOS_ABIERTOS
    END TRY
    BEGIN CATCH
        SELECT ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
END
GO
-- EJECUCION DE SP_LEER_ESTUDIANTES
GO
DECLARE @RC int

-- TODO: Set parameter values here.

EXECUTE @RC = [dbo].[SP_LEER_PROGRAMAS_MODULOS_ABIERTOS] 
GO
--
--
--
-- PROCEDIMIENTOS ALMACENADOS PARA LA TABLA DE HORARARIOS
	    GO
CREATE OR ALTER PROCEDURE SP_CREAR_HORARIOS(@DIA VARCHAR(10) OUT,
									@HORA_INICIO TIME, @HORA_FIN TIME,
									@COD_PROGRAMAS_MODULOS_ABIERTOS INT,
									@MSJ VARCHAR (50) OUT)
AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF (NOT EXISTS (SELECT 1 FROM HORARIOS
		WHERE @DIA=DIA AND @HORA_INICIO=HORA_INICIO))
		BEGIN
		 INSERT INTO HORARIOS(DIA,HORA_INICIO,HORA_FIN,COD_PROGRAMAS_MODULOS_ABIERTOS)
		 VALUES(@DIA,@HORA_INICIO,@HORA_FIN,@COD_PROGRAMAS_MODULOS_ABIERTOS)
		 SET @MSJ='HORARIO AÑADIDO DE MANERA CORRECTA'
		END
		ELSE
		BEGIN 
		   IF EXISTS (SELECT 1 FROM PROGRAMAS_MODULOS_ABIERTOS WHERE COD_PROGRAMAS_MODULOS_ABIERTOS=@COD_PROGRAMAS_MODULOS_ABIERTOS)
		 SET @MSJ='EL HORARIO YA FUE AÑADIDO'
		END     
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
   ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO
---
---
-- 2- ACTUALIZAR HORARIO
GO
CREATE OR ALTER PROCEDURE SP_ACTUALIZAR_HORARIOS (@DIA VARCHAR(10) OUT,
									@HORA_INICIO TIME, @HORA_FIN TIME,
									@COD_PROGRAMAS_MODULOS_ABIERTOS INT,
									@MSJ VARCHAR (50) OUT)
AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF ( EXISTS (SELECT 1 FROM HORARIOS
		WHERE @DIA=DIA AND @HORA_INICIO=HORA_INICIO))
		BEGIN
		UPDATE HORARIOS SET DIA=@DIA,HORA_INICIO=@HORA_INICIO,HORA_FIN=@HORA_FIN,COD_PROGRAMAS_MODULOS_ABIERTOS=@COD_PROGRAMAS_MODULOS_ABIERTOS
			WHERE @DIA=DIA AND @HORA_INICIO=HORA_INICIO
		 SET @MSJ='HORARIO AÑADIDO DE MANERA CORRECTA'
		END
		ELSE
		BEGIN 
		   IF (NOT EXISTS (SELECT 1 FROM HORARIOS WHERE @DIA=DIA AND @HORA_INICIO=HORA_INICIO))
		 SET @MSJ='EL HORARIO INGRESADO NO COINCIDE'
		END     
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
   ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO
 --
 --
 -- 3- ELIMINAR HORARIOS
 GO
CREATE OR ALTER PROCEDURE SP_ELIMINAR_HORARIOS (@DIA VARCHAR(10) OUT,
									@HORA_INICIO TIME, @HORA_FIN TIME,
									@COD_PROGRAMAS_MODULOS_ABIERTOS INT,
									@MSJ VARCHAR (50) OUT)
AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF ( EXISTS (SELECT 1 FROM HORARIOS
		WHERE @DIA=DIA AND @HORA_INICIO=HORA_INICIO))
		BEGIN
		DELETE FROM HORARIOS
		 SET @MSJ='HORARIO ELIMINADO DE MANERA CORRECTA'
		END
		ELSE
		BEGIN 
		   IF (NOT EXISTS (SELECT 1 FROM HORARIOS WHERE @DIA=DIA AND @HORA_INICIO=HORA_INICIO))
		 SET @MSJ='EL HORARIO INGRESADO NO COINCIDE'
		END     
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
   ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO
 --
 --
  -- 4- LEER REGITROS DE HORARIOS
  GO
CREATE OR ALTER PROCEDURE SP_LEER_HORARIOS
AS
BEGIN
    BEGIN TRY
        SELECT * FROM HORARIOS
    END TRY
    BEGIN CATCH
        SELECT ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
END
GO
-- EJECUCION DE SP_LEER_ESTUDIANTES
GO
DECLARE @RC int

-- TODO: Set parameter values here.

EXECUTE @RC = [dbo].[SP_LEER_HORARIOS] 
GO
--
--
--
-- PROCEDIMIENTOS ALMACENADOS PARA LA TABLA CERTIFICACIONES
-- 1- CREAR CERTIFICADOS
	    GO
CREATE OR ALTER PROCEDURE SP_CREAR_CERTIFICACIONES(@COD_CERTIFICACCION INT OUT, 
									@NOMBRE_CERTIFICADO VARCHAR(30),
									@MSJ VARCHAR (50) OUT)
AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF (NOT EXISTS (SELECT 1 FROM CERTIFICACIONES
		WHERE @COD_CERTIFICACCION=COD_CERTIFICACION))
		BEGIN
		 INSERT INTO CERTIFICACIONES(COD_CERTIFICACION,NOMBRE_CERTIFICADO)
		 VALUES(@COD_CERTIFICACCION,@NOMBRE_CERTIFICADO)
		 SET @MSJ='CERTIFICACION AÑADIDA DE MANERA CORRECTA'
		END
		ELSE
		BEGIN 
		   IF EXISTS (SELECT 1 FROM CERTIFICACIONES WHERE COD_CERTIFICACION=@COD_CERTIFICACCION)
		 SET @MSJ='EL CERTIFICADO YA FUE AÑADIDO'
		END     
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
   ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO
---
--
-- 2- ACTUALIZAR CERTIFICACCION
	    GO
CREATE OR ALTER PROCEDURE SP_ACTUALIZAR_CERTIFICACIONES(@COD_CERTIFICACCION INT OUT, 
									@NOMBRE_CERTIFICADO VARCHAR(30),
									@MSJ VARCHAR (50) OUT)
AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF ( EXISTS (SELECT 1 FROM CERTIFICACIONES
		WHERE @COD_CERTIFICACCION=COD_CERTIFICACION))
		BEGIN
		 UPDATE CERTIFICACIONES SET COD_CERTIFICACION=@COD_CERTIFICACCION,NOMBRE_CERTIFICADO=@NOMBRE_CERTIFICADO
		WHERE COD_CERTIFICACION=@COD_CERTIFICACCION
		 SET @MSJ='CERTIFICACION ACTUALIZADA DE MANERA CORRECTA'
		END
		ELSE
		BEGIN 
		   IF NOT EXISTS (SELECT 1 FROM CERTIFICACIONES WHERE COD_CERTIFICACION=@COD_CERTIFICACCION)
		 SET @MSJ='EL CERTIFICADO NO EXISTE'
		END     
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
   ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO
 --
 --
 -- -3 ELIMINAR CERTIFICACIONES
 GO
 CREATE OR ALTER PROCEDURE SP_ELIMINAR_CERTIFICACIONES(@COD_CERTIFICACCION INT OUT, 
									@NOMBRE_CERTIFICADO VARCHAR(30),
									@MSJ VARCHAR (50) OUT)
AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF ( EXISTS (SELECT 1 FROM CERTIFICACIONES
		WHERE @COD_CERTIFICACCION=COD_CERTIFICACION))
		BEGIN
		DELETE FROM CERTIFICACIONES 
		WHERE COD_CERTIFICACION=@COD_CERTIFICACCION
		 SET @MSJ='CERTIFICACION ELIMINADA DE MANERA CORRECTA'
		END
		ELSE
		BEGIN 
		   IF NOT EXISTS (SELECT 1 FROM CERTIFICACIONES WHERE COD_CERTIFICACION=@COD_CERTIFICACCION)
		 SET @MSJ='EL CERTIFICADO NO EXISTE'
		END     
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
   ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO
 --
 --
 -- 4- LEER REGISTROS
   GO
CREATE OR ALTER PROCEDURE SP_LEER_CERTIFICACIONES
AS
BEGIN
    BEGIN TRY
        SELECT * FROM CERTIFICACIONES
    END TRY
    BEGIN CATCH
        SELECT ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
END
GO
-- EJECUCION DE SP_LEER_ESTUDIANTES
GO
DECLARE @RC int

-- TODO: Set parameter values here.

EXECUTE @RC = [dbo].[SP_LEER_CERTIFICACIONES] 
GO
--
--
-- PROCESOS ALMACENADOS PARA LA TABLA MATRICULAS
--1- CREAR MATRICULA
GO
CREATE OR ALTER PROCEDURE SP_CREAR_MATRICULA(@NUM_RECIBO int OUT,
											@CARNET_EST	varchar(30),@MONTO decimal(10,2),
												@ESTADO_MATRICULA varchar(20),
												@ENCARGADO_MATRICULA varchar(30),
												@MSJ VARCHAR (50) OUT)
AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF (NOT EXISTS (SELECT 1 FROM MATRICULAS
		WHERE NUM_RECIBO=@NUM_RECIBO))
		BEGIN
		 INSERT INTO MATRICULAS(NUM_RECIBO,CARNET_EST,MONTO,ESTADO_MATRICULA,ENCARGADO_MATRICULA)
		 VALUES(@NUM_RECIBO,@CARNET_EST,@MONTO,@ESTADO_MATRICULA,@ENCARGADO_MATRICULA)
		 SELECT @NUM_RECIBO= IDENT_CURRENT('MATRICULAS')
		 SET @MSJ='MATRICULA AÑADIDA DE MANERA CORRECTA'
		END
		ELSE
		BEGIN 
		   IF EXISTS (SELECT 1 FROM MATRICULAS WHERE NUM_RECIBO=@NUM_RECIBO)
		 SET @MSJ='LA MATRICULA YA FUE REALIZADA'
		END     
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
   ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO
 --
 --
 -- 2- ATUALIZAR REGISTRO
 GO
CREATE OR ALTER PROCEDURE SP_ACTUALIZAR_MATRICULA(@NUM_RECIBO int OUT,
											@CARNET_EST	varchar(30),@MONTO decimal(10,2),
												@ESTADO_MATRICULA varchar(20),
												@ENCARGADO_MATRICULA varchar(30),
												@MSJ VARCHAR (50) OUT)
AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF ( EXISTS (SELECT 1 FROM MATRICULAS
		WHERE NUM_RECIBO=@NUM_RECIBO))
		BEGIN
		UPDATE MATRICULAS SET CARNET_EST=@CARNET_EST,MONTO=@MONTO,ESTADO_MATRICULA=@ESTADO_MATRICULA,ENCARGADO_MATRICULA=@ENCARGADO_MATRICULA
		WHERE NUM_RECIBO=@NUM_RECIBO
		SET @MSJ='MATRICULA ACTUALIZADA DE MANERA CORRECTA'
		END
		ELSE
		BEGIN 
		   IF  NOT EXISTS (SELECT 1 FROM MATRICULAS WHERE NUM_RECIBO=@NUM_RECIBO)
		 SET @MSJ='LA MATRICULA NO EXISTE'
		END     
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
   ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO
 --
 --
 -- 3- BORRAR MATRICULA
  GO
CREATE OR ALTER PROCEDURE SP_ELIMANAR_MATRICULA(@NUM_RECIBO int OUT,
											@CARNET_EST	varchar(30),@MONTO decimal(10,2),
												@ESTADO_MATRICULA varchar(20),
												@ENCARGADO_MATRICULA varchar(30),
												@MSJ VARCHAR (50) OUT)
AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF ( EXISTS (SELECT 1 FROM MATRICULAS
		WHERE NUM_RECIBO=@NUM_RECIBO))
		BEGIN
		DELETE FROM MATRICULAS
		WHERE NUM_RECIBO=@NUM_RECIBO
		SET @MSJ='MATRICULA ELIMINADA DE MANERA CORRECTA'
		END
		ELSE
		BEGIN 
		   IF  NOT EXISTS (SELECT 1 FROM MATRICULAS WHERE NUM_RECIBO=@NUM_RECIBO)
		 SET @MSJ='LA MATRICULA NO EXISTE'
		END     
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
   ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO
 --
 ---
 -- 4- LEER REGISTROS DE MATRICULA
    GO
CREATE OR ALTER PROCEDURE SP_LEER_MATRICULAS
AS
BEGIN
    BEGIN TRY
        SELECT * FROM MATRICULAS
    END TRY
    BEGIN CATCH
        SELECT ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
END
GO
-- EJECUCION DE SP_LEER_ESTUDIANTES
GO
DECLARE @RC int

-- TODO: Set parameter values here.

EXECUTE @RC = [dbo].[SP_LEER_MATRICULAS] 
GO
--
--
-- PROCEDIMIENTOS ALMACENADOS PARA LA TABLA DETALLE DE MATRICULA
-- 1- CREAR DETALLE DE MATRICULA
GO
CREATE OR ALTER PROCEDURE SP_CREAR_DETALLE_MATRICULA(@NUM_RECIBO int OUT,
										        @COD_PROGRAMAS_ABIERTOS INT,
												@MSJ VARCHAR (50) OUT)
AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF (NOT EXISTS (SELECT 1 FROM DETALLE_MATRICULAS
		WHERE NUM_RECIBO=@NUM_RECIBO))
		BEGIN
		 INSERT INTO DETALLE_MATRICULAS(COD_PROGRAMAS_MODULOS_ABIERTOS)
		 VALUES(@COD_PROGRAMAS_ABIERTOS)
		 SELECT @NUM_RECIBO= IDENT_CURRENT('MATRICULAS')
		 SET @MSJ='DETALLE DE MATRICULA AÑADIDA DE MANERA CORRECTA'
		END
		ELSE
		BEGIN 
		   IF EXISTS (SELECT 1 FROM DETALLE_MATRICULAS WHERE NUM_RECIBO=@NUM_RECIBO)
		 SET @MSJ='EL REGISTRO DE DETALLE MATRICULA YA FUE REALIZADA'
		END     
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
   ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO
 --
 --
-- 2- ACTUALIZAR DETALLE DE MATRICULAS
GO
CREATE OR ALTER PROCEDURE SP_ACTUALIZAR_DETALLE_MATRICULA(@NUM_RECIBO int OUT,
										        @COD_PROGRAMAS_ABIERTOS INT,
												@MSJ VARCHAR (50) OUT)
AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF ( EXISTS (SELECT 1 FROM DETALLE_MATRICULAS
		WHERE NUM_RECIBO=@NUM_RECIBO))
		BEGIN
		 UPDATE DETALLE_MATRICULAS SET COD_PROGRAMAS_MODULOS_ABIERTOS=@COD_PROGRAMAS_ABIERTOS
		 WHERE NUM_RECIBO=@NUM_RECIBO
		 SET @MSJ='DETALLE DE MATRICULA ACTUALIZADO DE MANERA CORRECTA'
		END
		ELSE
		BEGIN 
		   IF NOT EXISTS (SELECT 1 FROM DETALLE_MATRICULAS WHERE NUM_RECIBO=@NUM_RECIBO)
		 SET @MSJ='EL REGISTRO DE DETALLE MATRICULA NO EXISTE'
		END     
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
   ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO
 --
 --
 -- 3- ELIMINAR REGISTROS DE DETALLE DE MATRICULA
 GO
CREATE OR ALTER PROCEDURE SP_ELIMINAR_DETALLE_MATRICULA(@NUM_RECIBO int OUT,
										        @COD_PROGRAMAS_ABIERTOS INT,
												@MSJ VARCHAR (50) OUT)
AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF ( EXISTS (SELECT 1 FROM DETALLE_MATRICULAS
		WHERE NUM_RECIBO=@NUM_RECIBO))
		BEGIN
		DELETE FROM DETALLE_MATRICULAS
		 WHERE NUM_RECIBO=@NUM_RECIBO
		 SET @MSJ='DETALLE DE MATRICULA ELIMINADO DE MANERA CORRECTA'
		END
		ELSE
		BEGIN 
		   IF NOT EXISTS (SELECT 1 FROM DETALLE_MATRICULAS WHERE NUM_RECIBO=@NUM_RECIBO)
		 SET @MSJ='EL REGISTRO DE DETALLE MATRICULA NO EXISTE'
		END     
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
   ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO
 --
 --
 -- 4- LEER REGISTROS
 
    GO
CREATE OR ALTER PROCEDURE SP_LEER_DETALLE_MATRICULAS
AS
BEGIN
    BEGIN TRY
        SELECT * FROM DETALLE_MATRICULAS
    END TRY
    BEGIN CATCH
        SELECT ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
END
GO
-- EJECUCION DE SP_LEER_ESTUDIANTES
GO
DECLARE @RC int

-- TODO: Set parameter values here.

EXECUTE @RC = [dbo].[SP_LEER_DETALLE_MATRICULAS] 
GO
--
--
-- PROCEDIMIENTOS ALMACENADOS PARA LA TABLA CALIFICACIONES
--- 1- CREAR UNA CALIFIFACION

GO
CREATE OR ALTER PROCEDURE SP_CREAR_CALIFICACION(@NUM_RECIBO int OUT,
										        @CARNET_EST VARCHAR(15),
												@COD_PROGRAMAS_MODULOS_ABIERTOS INT,
												@ESTADO_EST VARCHAR (30),
												@MSJ VARCHAR (50) OUT)
AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF (NOT EXISTS (SELECT 1 FROM CALIFICACIONES
		WHERE NUM_RECIBO=@NUM_RECIBO))
		BEGIN
		 INSERT INTO CALIFICACIONES (NUM_RECIBO,CARNET_EST,COD_PROGRAMAS_MODULOS_ABIERTOS,ESTADO_EST)
		 VALUES(@NUM_RECIBO,@CARNET_EST,@COD_PROGRAMAS_MODULOS_ABIERTOS,@ESTADO_EST)
		 SET @MSJ='CALIFICACION AÑADIDA DE MANERA CORRECTA'
		END
		ELSE
		BEGIN 
		   IF EXISTS (SELECT 1 FROM CALIFIACIONES WHERE  NUM_RECIBO=@NUM_RECIBO)
		 SET @MSJ='LA CALIFICACION  YA FUE REGISTRADA'
		END     
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
   ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO
 --
 --
 -- 2- ACTUALIZAR REGISTROS
 GO
CREATE OR ALTER PROCEDURE SP_ACTUALIZAR_CALIFICACION(@NUM_RECIBO int OUT,
										        @CARNET_EST VARCHAR(15),
												@COD_PROGRAMAS_MODULOS_ABIERTOS INT,
												@ESTADO_EST VARCHAR (30),
												@MSJ VARCHAR (50) OUT)
AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF ( EXISTS (SELECT 1 FROM CALIFICACIONES
		WHERE NUM_RECIBO=@NUM_RECIBO))
		BEGIN
		 UPDATE CALIFICACIONES  SET NUM_RECIBO=@NUM_RECIBO,CARNET_EST=@CARNET_EST,COD_PROGRAMAS_MODULOS_ABIERTOS=@COD_PROGRAMAS_MODULOS_ABIERTOS,ESTADO_EST=@ESTADO_EST
		 WHERE NUM_RECIBO=@NUM_RECIBO
		 SET @MSJ='CALIFICACION ACTUALIZADA DE MANERA CORRECTA'
		END
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
   ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO
 --
 --
 -- 3- ELIMINAR REGISTROS
  GO
CREATE OR ALTER PROCEDURE SP_ELIMINAR_CALIFICACION(@NUM_RECIBO int OUT,
										        @CARNET_EST VARCHAR(15),
												@COD_PROGRAMAS_MODULOS_ABIERTOS INT,
												@ESTADO_EST VARCHAR (30),
												@MSJ VARCHAR (50) OUT)
AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF ( EXISTS (SELECT 1 FROM CALIFICACIONES
		WHERE NUM_RECIBO=@NUM_RECIBO))
		BEGIN
		 DELETE FROM CALIFICACIONES
		 WHERE NUM_RECIBO=@NUM_RECIBO
		 SET @MSJ='CALIFICACION ACTUALIZADA DE MANERA CORRECTA'
		END
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
   ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO
 -- 
 --
 -- 4- LEER REGISTROS DE CALIFICACIONES
  
    GO
CREATE OR ALTER PROCEDURE SP_LEER_CALIFICACIONES
AS
BEGIN
    BEGIN TRY
        SELECT * FROM CALIFICACIONES
    END TRY
    BEGIN CATCH
        SELECT ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
END
GO
-- EJECUCION DE SP_LEER_ESTUDIANTES
GO
DECLARE @RC int

-- TODO: Set parameter values here.

EXECUTE @RC = [dbo].[SP_LEER_CALIFICACIONES] 
GO
 --
 --
 --PROCESOS ALMACENADOS DE LA TABLA CERTIFICACIONES
 GO
CREATE OR ALTER PROCEDURE SP_CREAR_CERTIFICACION(@COD_PROF INT OUT,
												 @COD_CERTIFICACION INT,
												@MSJ VARCHAR (50) OUT)
AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF (NOT EXISTS (SELECT 1 FROM CERTIFICACIONES_PROF
		WHERE COD_CERTIFICACION=@COD_CERTIFICACION AND COD_PROF=@COD_PROF))
		BEGIN
		 INSERT INTO CERTIFICACIONES_PROF(COD_PROF,COD_CERTIFICACION)
		 VALUES(@COD_PROF,@COD_CERTIFICACION)
		 SET @MSJ='CERTIFICACION AÑADIDA AL PROFESOR DE MANERA CORRECTA'
		END
		ELSE
		BEGIN 
		   IF EXISTS (SELECT 1 FROM CERTIFICACIONES_PROF WHERE COD_CERTIFICACION=@COD_CERTIFICACION AND COD_PROF=@COD_PROF)
		 SET @MSJ='LA CERTIFACCION YA PERTENECE AL PROFESOR'
		END     
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
   ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO
 --
 ---
 -- 2- ACTUALIZAR CERTIFICACION
  GO
CREATE OR ALTER PROCEDURE SP_ACTUALIZAR_CERTIFICACION(@COD_PROF INT OUT,
												 @COD_CERTIFICACION INT,
												@MSJ VARCHAR (50) OUT)
AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF (EXISTS (SELECT 1 FROM CERTIFICACIONES_PROF
		WHERE COD_CERTIFICACION=@COD_CERTIFICACION AND COD_PROF=@COD_PROF))
		BEGIN
		UPDATE CERTIFICACIONES_PROF SET COD_PROF=@COD_PROF,COD_CERTIFICACION=@COD_CERTIFICACION
		WHERE COD_CERTIFICACION=@COD_CERTIFICACION AND COD_PROF=@COD_PROF
		 SET @MSJ='CERTIFICACION ACTUALIZADA AL PROFESOR DE MANERA CORRECTA'
		END
		ELSE
		BEGIN 
		   IF  NOT EXISTS (SELECT 1 FROM CERTIFICACIONES_PROF WHERE COD_CERTIFICACION=@COD_CERTIFICACION AND COD_PROF=@COD_PROF)
		 SET @MSJ='LA CERTIFACCION O EL CODIGO NO CORRESPONDEN'
		END     
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
   ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO
 -- 3- ELIMINAR REGISTROS 
   GO
CREATE OR ALTER PROCEDURE SP_ELIMINAR_CERTIFICACION(@COD_PROF INT OUT,
												 @COD_CERTIFICACION INT,
												@MSJ VARCHAR (50) OUT)
AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF (EXISTS (SELECT 1 FROM CERTIFICACIONES_PROF
		WHERE COD_CERTIFICACION=@COD_CERTIFICACION AND COD_PROF=@COD_PROF))
		BEGIN
	DELETE FROM CERTIFICACIONES_PROF
		WHERE COD_CERTIFICACION=@COD_CERTIFICACION AND COD_PROF=@COD_PROF
		 SET @MSJ='CERTIFICACION ELIMINADA AL PROFESOR DE MANERA CORRECTA'
		END
		ELSE
		BEGIN 
		   IF  NOT EXISTS (SELECT 1 FROM CERTIFICACIONES_PROF WHERE COD_CERTIFICACION=@COD_CERTIFICACION AND COD_PROF=@COD_PROF)
		 SET @MSJ='LA CERTIFACCION O EL CODIGO NO CORRESPONDEN'
		END     
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
   ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO
 --
 --
 -- 4- LEER REGISTROS
     GO
CREATE OR ALTER PROCEDURE SP_LEER_CERTIFICACIONES_PROF
AS
BEGIN
    BEGIN TRY
        SELECT * FROM CERTIFICACIONES_PROF
    END TRY
    BEGIN CATCH
        SELECT ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
END
GO
-- EJECUCION DE SP_LEER_ESTUDIANTES
GO
DECLARE @RC int

-- TODO: Set parameter values here.

EXECUTE @RC = [dbo].[SP_LEER_CERTIFICACIONES_PROF] 
GO
-------------------------------------------------------------------------------------------------------------
-- PROCESOS ALMACENADOS PARA LA TABLA DE PAGOS
--1 CREAR UN PAGO
GO
CREATE OR ALTER PROCEDURE SP_CREAR_PAGO(@NUM_RECIBO INT OUT,
												 @CARNET_EST INT,
												 @MONTO_DE_PAGO INT,
												 @FECHA_PAGO DATE,
												@MSJ VARCHAR (50) OUT)
AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF (NOT EXISTS (SELECT 1 FROM PAGOS
		WHERE CARNET_EST=@CARNET_EST AND NUM_RECIBO=@NUM_RECIBO))
		BEGIN
		 INSERT INTO PAGOS(NUM_RECIBO,CARNET_EST,MONTO_DE_PAGO,FECHA_PAGO)
		 VALUES(@NUM_RECIBO,@CARNET_EST,@MONTO_DE_PAGO,@FECHA_PAGO)
		 SET @MSJ='PAGO AÑADIDO AL ESTUDIANTE DE MANERA CORRECTA'
		END
		--2 - ACTUALIZA EL PAGO
		ELSE
		BEGIN 
		   IF EXISTS (SELECT 1 FROM PAGOS WHERE  CARNET_EST=@CARNET_EST AND NUM_RECIBO=@NUM_RECIBO)
		   UPDATE PAGOS SET @NUM_RECIBO=NUM_RECIBO,@CARNET_EST=CARNET_EST,@MONTO_DE_PAGO=MONTO_DE_PAGO,@FECHA_PAGO=FECHA_PAGO
		   WHERE CARNET_EST=@CARNET_EST AND NUM_RECIBO=@NUM_RECIBO
		 SET @MSJ='SE ACTUALIZO EL PAGO DE MANERA CORRECTA'
		END     
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
   ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO
 -------------
 ------------
 --3 ELIMINA EL PAGO
 GO
CREATE OR ALTER PROCEDURE SP_ELIMINAR_PAGO(@NUM_RECIBO INT OUT,
												 @CARNET_EST INT,
												 @MONTO_DE_PAGO INT,
												 @FECHA_PAGO DATE,
												@MSJ VARCHAR (50) OUT)
AS
	BEGIN TRY
	 BEGIN TRANSACTION 
		IF  EXISTS (SELECT 1 FROM PAGOS
		WHERE CARNET_EST=@CARNET_EST AND NUM_RECIBO=@NUM_RECIBO)
		BEGIN
		 DELETE FROM PAGOS
		WHERE CARNET_EST=@CARNET_EST AND NUM_RECIBO=@NUM_RECIBO
		 SET @MSJ='PAGO ELIMINADO DE MA NERA CORRECTA'
		END
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
   ROLLBACK TRANSACTION
    SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO
 ------
 ------
 --4 MOSTRAR PAGO
      GO
CREATE OR ALTER PROCEDURE SP_LEER_PAGOS
AS
BEGIN
    BEGIN TRY
        SELECT * FROM PAGOS
    END TRY
    BEGIN CATCH
        SELECT ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
END
GO
-- EJECUCION DE SP_LEER_ESTUDIANTES
GO
DECLARE @RC int

-- TODO: Set parameter values here.

EXECUTE @RC = [dbo].[SP_LEER_PAGOS] 
GO


												---
												---
												---
									      -- FUNCIONES--

USE BASE_DATOS_PROYECTO
GO
-- 8 funciones
--1 ESTA FUNCION BUSCA AL ESTUDAINTE POR EL CARNET
GO
CREATE OR ALTER FUNCTION F_BUSCAR_ESTUDIANTE(@CARNET_EST VARCHAR(10))
RETURNS INT AS
BEGIN
	DECLARE @ENCONTRADO INT
	IF(EXISTS(SELECT 1 FROM ESTUDIANTES WHERE CARNET_EST=@CARNET_EST))
	 SET @ENCONTRADO=1
	ELSE
	 SET @ENCONTRADO=0
	 RETURN @ENCONTRADO
	END
GO
--2 ESTA FUNCION VERRIFICA QUE NO HAYA UN HORARIO ASIGNADO AL MISMO DIA Y A LA HORA DE INICIO Y HORA DE FIN.
GO
CREATE OR ALTER FUNCTION F_HORARIO_DISPONIBLE(@COD_PROF INT ,@DIA VARCHAR(10),@HORA_INICIO TIME,@HORA_FIN TIME)
RETURNS BIT AS
BEGIN 
	DECLARE @LIBRE BIT
	IF  EXISTS (SELECT 1 FROM PROGRAMAS_MODULOS_ABIERTOS PMA INNER JOIN HORARIOS H
	ON PMA.COD_PROGRAMAS_MODULOS_ABIERTOS=H.COD_PROGRAMAS_MODULOS_ABIERTOS
	WHERE COD_PROF=@COD_PROF AND @HORA_INICIO BETWEEN HORA_INICIO AND HORA_FIN )
	SET @LIBRE =1
	ELSE
	 SET @LIBRE=0
	 RETURN @LIBRE
	 END
GO
--3 ESTA FUNCION MUESTRA EL TOTAL A PAGAR DEL ESTUDAINTE BUSCANDO POR CARNET
GO
CREATE  OR ALTER FUNCTION F_TOTAL_PAGAR_EST(@CARNET_EST VARCHAR(10))
RETURNS DECIMAL (10,2) AS
BEGIN 
	DECLARE @TOTAL_PAGO DECIMAL(10,2)
	SELECT @TOTAL_PAGO=SUM(PRECIO_MODULO)
    FROM MATRICULAS M
	INNER JOIN DETALLE_MATRICULAS DM
	ON M.NUM_RECIBO=DM.NUM_RECIBO
	INNER JOIN PROGRAMAS_MODULOS_ABIERTOS PMA
	ON DM.COD_PROGRAMAS_MODULOS_ABIERTOS=PMA.COD_PROGRAMAS_MODULOS_ABIERTOS
	INNER JOIN PROGRAMAS_MODULOS PM
	ON PMA.COD_PROGRAMAS_MODULOS=PM.COD_PROGRAMAS_MODULOS
	INNER JOIN MODULOS MO
	ON PM.COD_MODULO=MO.COD_MODULO
	WHERE @CARNET_EST=CARNET_EST
	RETURN @TOTAL_PAGO
END
GO
-- 4 ESTA FUNCION VERIFICA QUE EL PROFESOR NO TENGA MATERIAS ASIGNADAS
GO
CREATE OR ALTER FUNCTION F_ASIGNAR_PROF(@COD_PROF INT)
RETURNS INT AS
BEGIN-- 1 SIGNIFICA QUE TIENE ASIGNADOS, 0 SIGINIFICA QUE NO
	DECLARE @ASIGNADO INT
	IF (EXISTS (SELECT 1 FROM CERTIFICACIONES_PROF WHERE COD_PROF=@COD_PROF))
	SET @ASIGNADO=1
	ELSE
	SET @ASIGNADO=0
	RETURN @ASIGNADO
END

--------------------------------------------------------------------------
-- 5 ESTA FUNCION VERIFICA SI EL PROFESOR EXISTE
GO
CREATE OR ALTER FUNCTION F_EXISTE_PROF(@COD_PROF INT)
RETURNS INT AS
BEGIN
	DECLARE @EXISTE INT
	IF  EXISTS (SELECT 1 FROM PROFESORES WHERE COD_PROF=@COD_PROF)
	SET @EXISTE=1
	ELSE 
	SET @EXISTE=0
	RETURN @EXISTE
END
GO
-- 6 ESTA FUNCION VERIFICA SI EL ESTUDIANTE TIENE MATRICULA 
GO
CREATE OR ALTER FUNCTION F_EXISTE_EST(@CARNET_EST VARCHAR(10))
RETURNS INT AS
BEGIN
	DECLARE @EXISTE INT
	IF  EXISTS (SELECT 1 FROM MATRICULAS WHERE CARNET_EST=@CARNET_EST)
	SET @EXISTE=1
	ELSE 
	IF NOT EXISTS (SELECT 1 FROM MATRICULAS WHERE CARNET_EST=@CARNET_EST)
	SET @EXISTE=0
	RETURN @EXISTE
END
GO
-- 7- VERIFIFICAR LA EXISTENCIA DE UN MODULO
GO
CREATE OR ALTER FUNCTION F_EXISTE_MODULO(@COD_MODULO VARCHAR(10))
RETURNS INT AS
BEGIN
	DECLARE @EXISTE INT
	IF  EXISTS (SELECT 1 FROM MODULOS WHERE COD_MODULO=@COD_MODULO)
	SET @EXISTE=1
	ELSE 
	SET @EXISTE=0
	RETURN @EXISTE
END
GO
-- 8 - VERIFICAR SI EL ESTUDIANTE ESTA APROBADO O REPROBADO
GO
CREATE OR ALTER FUNCTION F_APRO_REP_EST(@CARNET_EST VARCHAR(10))
RETURNS INT AS
BEGIN
	DECLARE @CONDICION INT
	IF  EXISTS (SELECT 1 FROM CALIFICACIONES WHERE CARNET_EST=@CARNET_EST AND NOTA_FINAL>= 70  )
	SET @CONDICION=1
	ELSE 
	IF  EXISTS (SELECT 1 FROM CALIFICACIONES WHERE CARNET_EST=@CARNET_EST AND NOTA_FINAL< 70  )
	SET @CONDICION=0
	RETURN @CONDICION
END
GO

-- 9- ESTA FUNCION VERIFICA LA MOROSIDAD DEL ESTUDIANTE
CREATE  OR ALTER FUNCTION F_EST_MOROSO(@CARNET_EST VARCHAR(10))
RETURNS INT AS
BEGIN 
	DECLARE @TOTAL_PAGO INT-- SI ELCARNET TIENE UN MONTO DE PAGO 
	 IF EXISTS ( SELECT 1 FROM PAGOS WHERE CARNET_EST=@CARNET_EST AND MONTO_DE_PAGO>0)
	 SET @TOTAL_PAGO=1 -- SIGNIFICA QUE EL ESTUDAINTE DEBE DINERO 
	  ELSE 
	   IF EXISTS ( SELECT 1 FROM PAGOS WHERE CARNET_EST=@CARNET_EST AND MONTO_DE_PAGO=0)
	   SET @TOTAL_PAGO=0-- SIGNIFICA QUE NO DEBE
	   RETURN @TOTAL_PAGO
END
GO
-- 10 VERIFICA CHOQUE DE HORARIOS
GO
CREATE  OR ALTER FUNCTION F_EST_CHOQUE(@CARNET_EST VARCHAR(10),
									   @COD_MODULO VARCHAR(10))

RETURNS INT AS
BEGIN 
	DECLARE @HORA_INICIO TIME
	DECLARE @COMPROBACION INT
	DECLARE @DIA VARCHAR(10)

SELECT @DIA=DIA,@HORA_INICIO=HORA_INICIO
FROM HORARIOS H INNER JOIN PROGRAMAS_MODULOS_ABIERTOS PMA
ON H.COD_PROGRAMAS_MODULOS_ABIERTOS=PMA.COD_PROGRAMAS_MODULOS_ABIERTOS
INNER JOIN PROGRAMAS_MODULOS PM
ON PMA.COD_PROGRAMAS_MODULOS=PM.COD_PROGRAMAS_MODULOS
INNER JOIN MODULOS M
ON PM.COD_MODULO=M.COD_MODULO
WHERE M.COD_MODULO=@COD_MODULO

IF EXISTS(SELECT 1 FROM ESTUDIANTES E INNER JOIN  MATRICULAS M 
ON E.CARNET_EST=M.CARNET_EST
INNER JOIN DETALLE_MATRICULAS DM
ON M.NUM_RECIBO=DM.NUM_RECIBO
INNER JOIN PROGRAMAS_MODULOS_ABIERTOS PMA
ON  DM.COD_PROGRAMAS_MODULOS_ABIERTOS=PMA.COD_PROGRAMAS_MODULOS_ABIERTOS
INNER JOIN HORARIOS H
ON PMA.COD_PROGRAMAS_MODULOS_ABIERTOS= H.COD_PROGRAMAS_MODULOS_ABIERTOS
WHERE M.CARNET_EST=@CARNET_EST AND DIA =@DIA AND @HORA_INICIO BETWEEN HORA_INICIO AND HORA_FIN)
BEGIN 
	SET @COMPROBACION=1
END
ELSE
	SET @COMPROBACION=0
RETURN @COMPROBACION
END;
GO
-- 10-- ESTA FUNCION VERIFICA SI EL PROFESOR CUENTA CON LA CERTIFICACION
CREATE  OR ALTER FUNCTION F_VERIFICACION_PROF(@COD_PROF INT)
RETURNS INT AS
BEGIN 
	DECLARE @TOTAL_PAGO INT
	 IF EXISTS ( SELECT 1 FROM CERTIFICACIONES_PROF WHERE COD_PROF=@COD_PROF)
	 SET @TOTAL_PAGO=1 
	  ELSE 
	   SET @TOTAL_PAGO=0
	   RETURN @TOTAL_PAGO
END
GO
			--11
		CREATE  OR ALTER FUNCTION F_VERIFICACION_LAB(@COD_LABORATORIO VARCHAR(10))
RETURNS INT AS
BEGIN 
	DECLARE @TOTAL_PAGO INT
	 IF EXISTS ( SELECT 1 FROM PROGRAMAS_MODULOS_ABIERTOS WHERE COD_LABORATORIO=@COD_LABORATORIO)
	 SET @TOTAL_PAGO=1 
	  ELSE 
	   SET @TOTAL_PAGO=0
	   RETURN @TOTAL_PAGO
END
GO
-- 12
	GO
CREATE OR ALTER FUNCTION F_LAB_DISPONIBLE(@COD_LABORATORIO VARCHAR(10) ,@DIA VARCHAR(10),@HORA_INICIO TIME,@HORA_FIN TIME)
RETURNS BIT AS
BEGIN 
	DECLARE @LIBRE BIT
	IF  EXISTS (SELECT 1 FROM PROGRAMAS_MODULOS_ABIERTOS PMA INNER JOIN HORARIOS H
	ON PMA.COD_PROGRAMAS_MODULOS_ABIERTOS=H.COD_PROGRAMAS_MODULOS_ABIERTOS
	WHERE COD_LABORATORIO=@COD_LABORATORIO AND @HORA_INICIO BETWEEN HORA_INICIO AND HORA_FIN )
	SET @LIBRE =1
	ELSE
	 SET @LIBRE=0
	 RETURN @LIBRE
	 END
GO	
		--
		--13
		GO
CREATE OR ALTER FUNCTION F_EXISTE_LAB(@COD_LABORATORIO VARCHAR(10))
RETURNS INT AS
BEGIN
	DECLARE @EXISTE INT
	IF  EXISTS (SELECT 1 FROM LABORATORIO WHERE COD_LABORATORIO=@COD_LABORATORIO)
	SET @EXISTE=1
	ELSE 
	SET @EXISTE=0
	RETURN @EXISTE
END
GO
		
		---
									---
									---
							    --TRIGGERS--
						
-- 1- este trigger se activa a la hora de eliminar una matricula de estudiante
-- eliminando detalle de matricula y lo relacionado al numero de recibo de ese estudiante
GO
CREATE OR ALTER TRIGGER TR_ELIMINAR_MATRICULA
ON MATRICULAS FOR DELETE
AS
	DECLARE @NUM_MATRICULA INT
	SELECT @NUM_MATRICULA = NUM_RECIBO FROM deleted
	
	DELETE DETALLE_MATRICULAS WHERE NUM_RECIBO = @NUM_MATRICULA-- aqui eliminamos de detalle de matricula 
	-- haciendo la comprobacion por numero de recibo
	---------------------------------------
	--------------------------------------------
	--2 este trigger pasasara a inactivo el estudainte que se le realize un borrado logico en la tabla de estudaintes
	GO
CREATE OR ALTER TRIGGER TR_BORRADO_EST
ON ESTUDIANTES FOR UPDATE
AS
	DECLARE @CARNET_EST VARCHAR(10)
	SELECT @CARNET_EST = CARNET_EST FROM inserted
	IF EXISTS(SELECT 1 FROM ESTUDIANTES WHERE (CARNET_EST = @CARNET_EST) AND (BORRADO_EST = 1))-- HACE LA COMPROBACION
		UPDATE MATRICULAS SET ESTADO_MATRICULA = 'INACTIVO' WHERE CARNET_EST = @CARNET_EST-- ACTUALIZA
GO
-------------------
-------------\
-- 3- ESTE TRIGGER ELIMINA LAS MATRICULAS QUE NO TENGAN DETALLE DE MATRICULAS ASOCIADOS A UNA MATRICULA 
GO
CREATE OR ALTER TRIGGER TR_ELIMINAR_MATRICULAS_DETALLE
ON DETALLE_MATRICULAS FOR DELETE
AS
	DECLARE @NUM_MATRICULA INT
	SELECT @NUM_MATRICULA = NUM_RECIBO FROM deleted

	IF NOT EXISTS (SELECT 1 FROM DETALLE_MATRICULAS WHERE NUM_RECIBO = @NUM_MATRICULA)
		BEGIN
			DELETE MATRICULAS WHERE NUM_RECIBO = @NUM_MATRICULA
		END
---------------------------------------------------------------
-- 4- ESTE TRIGEER PONE EL CODDIGO DEL PROFESOR EN NULL EN LA  PROGRAMAS MODULOS ABIERTOS, CUANDO
-- SE LE REALIZE UN BORRADO LOGICO AL PROFESOR
GO
CREATE OR ALTER TRIGGER TR_BORRADO_PROFESOR
ON PROFESORES AFTER UPDATE
AS
	DECLARE @COD_PROF INT,@BORRADO INT
	SELECT @COD_PROF = COD_PROF FROM inserted
	SELECT @BORRADO = BORRADO_PROF FROM inserted
	SELECT * FROM PROFESORES

	IF (@BORRADO = 1)
		BEGIN
			IF EXISTS(SELECT 1 FROM PROFESORES WHERE (COD_PROF = @COD_PROF AND BORRADO_PROF=@BORRADO))
				BEGIN
					UPDATE PROGRAMAS_MODULOS_ABIERTOS SET COD_PROF = NULL WHERE COD_PROF = @COD_PROF
				END
		END
		---------------
		-------------
--- 5 - ESTE TRIGGER ELIMINA LOS HORARIOS ASOCIADOS A LOS PROGRAMAS MODULOS ABIERTOS QUE SE ELIMNINEN 
GO
CREATE OR ALTER TRIGGER TR_HORARIOS
ON PROGRAMAS_MODULOS_ABIERTOS AFTER DELETE
AS
	DECLARE @COD_MA INT
	SELECT @COD_MA = COD_PROGRAMAS_MODULOS_ABIERTOS FROM deleted

	DELETE HORARIOS WHERE COD_PROGRAMAS_MODULOS_ABIERTOS =@COD_MA
GO
-------------
------------- 
--- 6-ESTE TRIGGER CCAMBIA EL ESTADO DEL PROFEOSOR A ACTIVO CUANDO SE AGREGA UN PROFESOR POR PRIMERA VEZ
GO
CREATE OR ALTER TRIGGER TR_AGREGAR_PROFESOR
ON PROFESORES FOR INSERT
AS
	DECLARE @COD_PROF VARCHAR(10)
	SELECT @COD_PROF = COD_PROF FROM inserted
	UPDATE PROFESORES SET ESTADO_PROF='ACTIVO' WHERE @COD_PROF=COD_PROF
GO
---
CREATE TABLE REGISTROS_EST(
	FECHA DATE,
	CARNET_EST VARCHAR(10),
	DESCRIPCION VARCHAR(100),
	USUARIO VARCHAR(20)
);
-- 7 ESTE TRIGGER REGISTRA EN RESGISTROS LOS ESTUDIANTES QUE SE ELIMINEN EL CARNET
GO
CREATE TRIGGER T_REGISTRO_EST
ON ESTUDIANTES
FOR DELETE
AS
	DECLARE @CARNET_EST VARCHAR(20)
	SELECT @CARNET_EST = CARNET_EST FROM deleted
	INSERT INTO RESGISTROS_EST(FECHA,CARNET_EST,DESCRIPCION,USUARIO)
	VALUES (GETDATE(),@CARNET_EST,'ESTUDIANTE ELIMINADO',SYSTEM_USER)
	GO
-----


---
--1 SP MATRICULAR UN ESTUDIANTE
GO
CREATE OR ALTER PROCEDURE SP_MATRICULAR_E(@CARNET_EST VARCHAR(10) OUT,
											  @COD_MODULO VARCHAR(10),
											  @FECHA DATE,
											  @MONTO DECIMAL(10,2),
											  @ENCARGADO_MATRICULA VARCHAR(100),
											  @ESTADO_MATRICULA VARCHAR(10),
											  @OBSERVACIONES VARCHAR(100),
											  @MSJ VARCHAR (100)OUT)

AS 
BEGIN TRY
	BEGIN TRANSACTION 
	DECLARE @CARNET_EST_V INT
	DECLARE @COD_MODULO_V INT
	DECLARE @MOROSIDAD INT -- DECLARAMOS VARIABLES 
	DECLARE @APROBADO INT
	DECLARE @CHOQUE INT 
	SET @CHOQUE = dbo.F_EST_CHOQUE(@CARNET_EST, @COD_MODULO)
	SET @APROBADO= dbo.F_APRO_REP_EST(@CARNET_EST)
	SET @MOROSIDAD= dbo.F_EST_MOROSO(@CARNET_EST )
	SET @COD_MODULO_V= dbo.F_EXISTE_MODULO(@COD_MODULO)-- RECIBIMOS VARIABLES
	SET @CARNET_EST_V= dbo.F_BUSCAR_ESTUDIANTE(@CARNET_EST)
	BEGIN 
	IF (@CARNET_EST_V=1 and @COD_MODULO_V=1 and  @MOROSIDAD=0 and @APROBADO=1 and @CHOQUE=0)
		BEGIN
			INSERT INTO MATRICULAS(CARNET_EST,COD_MODULO,FECHA,MONTO,ENCARGADO_MATRICULA,ESTADO_MATRICULA,OBSERVACIONES_MATRICULA)
			VALUES (@CARNET_EST,@COD_MODULO,@FECHA,@MONTO,@ENCARGADO_MATRICULA,@ESTADO_MATRICULA,@OBSERVACIONES)
			print 'el estudiante se agrego correctamnete'
	END 
	ELSE
	IF(@CARNET_EST_V=0)
	PRINT 'EL ESTUDIAMTE NO EXISTE'
	IF(@COD_MODULO_V=0)
	PRINT 'EL CODIGO DEL MODULO NO EXISTE'
	IF(@APROBADO=0)
	PRINT 'EL ESTUDAINTE ES REPROBADO'
	IF(@MOROSIDAD=1)
	PRINT 'EL ESTUDIANTE TIENE DEUDAS'
    IF(@CHOQUE=1)
	PRINT 'EL ESTUDIANTE TIENE CHOQUES DE HORARIO'
	END

	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
  ROLLBACK TRANSACTION
   SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO

 ----
 --- EJECUCION DEL SP PARA MATRICULAR ESTUDIANTE
 GO

DECLARE @RC int
DECLARE @CARNET_EST varchar(10)
DECLARE @COD_MODULO varchar(10)
DECLARE @FECHA date
DECLARE @MONTO decimal(10,2)
DECLARE @ENCARGADO_MATRICULA varchar(100)
DECLARE @ESTADO_MATRICULA varchar(10)
DECLARE @OBSERVACIONES varchar(100)
DECLARE @MSJ varchar(100)

-- TODO: Set parameter values here.

	
SET @CARNET_EST ='NA203'
SET @COD_MODULO ='PROG-DM01'
SET @FECHA ='20210923'	
SET @MONTO =9990
SET @ENCARGADO_MATRICULA= 'MARCOS'
SET @ESTADO_MATRICULA='ACTIVO'
SET @OBSERVACIONES='LA MATRICULA SE REALIZO EN LA OFICINA CENTRAL Y SE PAGO EN EFECTIVO'




EXECUTE @RC = [dbo].[SP_MATRICULAR_E] 
   @CARNET_EST OUTPUT
  ,@COD_MODULO
  ,@FECHA
  ,@MONTO
  ,@ENCARGADO_MATRICULA
  ,@ESTADO_MATRICULA
  ,@OBSERVACIONES
  ,@MSJ OUTPUT
GO
	



	---------------------

	------------------
--SP CREAR MODULO
GO								
	CREATE OR ALTER PROCEDURE SP_ABRIR_MODULO(@COD_PROGRAMAS_MODULOS_ABIERTOS VARCHAR(10) OUT,
											  @COD_PROF INT,
											  @COD_PROGRAMAS_MODULOS INT,
											  @DIA VARCHAR(10),
											  @FECHA_INICIO DATE,
											  @FECHA_FINAL DATE,
											  @HORA_INICIO TIME,
											  @HORA_FIN TIME,
											  @COD_LABORATORIO VARCHAR(20),
											  @GRUPO VARCHAR(20),
											  @CUPO INT,
											  @MSJ VARCHAR (100)OUT)

AS 
BEGIN TRY
	BEGIN TRANSACTION 
	DECLARE @CHOQUE_H INT 
	DECLARE @HORARIO INT 
	DECLARE @PROF_EXIST INT
	DECLARE @CERTIF INT--- DECLARAMOS VARIABLES 
	DECLARE @LAB INT
	DECLARE @COD_MODULO VARCHAR(10)
	DECLARE @EXITS_MODU INT
	DECLARE @EXI_LAB INT
	SET @EXI_LAB= dbo.F_EXISTE_LAB(@COD_LABORATORIO)
	SET @EXITS_MODU= dbo.F_EXISTE_MODULO(@COD_MODULO)
	SET @LAB=  dbo.F_LAB_DISPONIBLE(@COD_LABORATORIO,@DIA,@HORA_INICIO,@HORA_FIN)-- RECIBIMOS PARAMETROS
	SET @CERTIF= dbo.F_VERIFICACION_PROF(@COD_PROF)
	SET @PROF_EXIST= dbo.F_EXISTE_PROF(@COD_PROF)
	SET @CHOQUE_H= dbo.F_HORARIO_DISPONIBLE(@COD_PROF,@DIA,@HORA_INICIO,@HORA_FIN)
BEGIN
	IF @EXITS_MODU=0 AND  @PROF_EXIST=1 AND @CERTIF=1 -- @LAB=0 --AND @CHOQUE_H=0 
	BEGIN
	INSERT INTO PROGRAMAS_MODULOS_ABIERTOS (COD_PROGRAMAS_MODULOS_ABIERTOS,COD_PROF,
											FECHA_INICIO,FECHA_FINAL,COD_LABORATORIO,GRUPO,CUPO)
	VALUES(@COD_PROGRAMAS_MODULOS_ABIERTOS,@COD_PROF,@FECHA_INICIO,@FECHA_FINAL,@COD_LABORATORIO,@GRUPO,@CUPO)
		SELECT @COD_PROGRAMAS_MODULOS =IDENT_CURRENT('PROGRAMAS_MODULOS')
		INSERT INTO HORARIOS(COD_PROGRAMAS_MODULOS_ABIERTOS,DIA,HORA_INICIO,HORA_FIN)
		VALUES(@COD_PROGRAMAS_MODULOS_ABIERTOS,@DIA,@HORA_INICIO,@HORA_FIN)
		SET @MSJ='MODULO CREADO DE MANERA CORRECTA'
		END
	ELSE
	IF(@PROF_EXIST=0)
	PRINT 'EL PROFESOR NO EXISTE'
	IF(@CERTIF=0)
	PRINT 'EL PROFESOR NO TIENE EL CERTIFICADO'
  --  IF(@LAB=1)
	--PRINT 'EL LABORATORIO NO EXISTE'
	--IF( @CHOQUE_H=0 )
	--PRINT 'EL HORARIO ESTA ASIGNADO'
	END
	
	COMMIT TRANSACTION
END TRY
 BEGIN CATCH
  ROLLBACK TRANSACTION
   SET @MSJ= ERROR_MESSAGE()
 END CATCH
 GO
-----------------------------
--- EJECUCION
GO

DECLARE @RC int
DECLARE @COD_PROGRAMAS_MODULOS_ABIERTOS varchar(10)
DECLARE @COD_PROF int
DECLARE @COD_PROGRAMAS_MODULOS int
DECLARE @DIA varchar(10)
DECLARE @FECHA_INICIO date
DECLARE @FECHA_FINAL date
DECLARE @HORA_INICIO time(7)
DECLARE @HORA_FIN time(7)
DECLARE @COD_LABORATORIO varchar(20)
DECLARE @GRUPO varchar(20)
DECLARE @CUPO int
DECLARE @MSJ varchar(100)

-- TODO: Set parameter values here.


SET @COD_PROGRAMAS_MODULOS_ABIERTOS='20987'
SET @COD_PROF=999
SET @COD_PROGRAMAS_MODULOS= -1
SET @DIA='MARTES'
SET @FECHA_INICIO='20220806'
SET @FECHA_FINAL='20230806'
SET @HORA_INICIO='5:00'
SET @HORA_FIN='7:00'
SET @COD_LABORATORIO='LAB-09'
SET @GRUPO='GP_690'
SET @CUPO=10

EXECUTE @RC = [dbo].[SP_ABRIR_MODULO] 
   @COD_PROGRAMAS_MODULOS_ABIERTOS OUTPUT
  ,@COD_PROF
  ,@COD_PROGRAMAS_MODULOS
  ,@DIA
  ,@FECHA_INICIO
  ,@FECHA_FINAL
  ,@HORA_INICIO
  ,@HORA_FIN
  ,@COD_LABORATORIO
  ,@GRUPO
  ,@CUPO
  ,@MSJ OUTPUT
  PRINT @MSJ
GO
